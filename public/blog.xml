<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">

<channel>
  <title>Reaper's blog</title>
  <link>https://reaper.im/blog</link>
  <description>stories, rants, and development</description>
  <atom:link href="https://reaper.im/blog.xml" rel="self" type="application/rss+xml" />
  
      <item>
      <guid>https://reaper.im/blog/20210301-My-Linux-Setup-</guid>
      <title>My Linux Setup</title>
      <link>https://reaper.im/blog/20210301-My-Linux-Setup-</link>
      <description>
        <![CDATA[<p>I haven&#39;t talked much about my linux setup on this blog, so let&#39;s go through a few things I wanted to answer. </p>
<h2 id="favorite-linux-">Favorite Linux ?</h2>
<p>No, specific one, I&#39;ve hopped through a lot of them over the years, the most used one&#39;s are a custom spin of Debian and Arch. I do have backup thumbdrive&#39;s with actual OS installs, so not live linux USB&#39;s, but drives that contain the entire system (dev environment, needed setup, drivers, etc)</p>
<p>Let&#39;s list them out</p>
<ul>
<li>128GB Sandisk Drive - Arch Linux </li>
<li>64GB Sandisk Drive - Fedora </li>
<li>128GB Hp Drive - Custom Debian</li>
</ul>
<p>and then the internal HDD of my laptop dual boots between Windows 10 (cause I play games and the linux drivers for the hybrid hardware is still iffy) and Arch Linux (this is there just as a backup in case my drives aren&#39;t with me)</p>
<h2 id="setup">Setup?</h2>
<p>I&#39;ve basically got 2 setups one using <a href="http://openbox.org/wiki/Main_Page">Openbox</a> and one using <a href="https://swaywm.org/">Sway</a>, the openbox one is on most of the installs since I&#39;ve just started using sway and I&#39;m liking the i3 environment, I&#39;ve used i3 before for a lot of setups but I keep jumping back to openbox because I feel comfortable using openbox and i3 needs you to remember a good set of keyboard shortcuts which I do mess up sometimes so I just like the option of being able to use the mouse in case of doubt. Obviously, it becomes a 2nd nature once you&#39;ve used i3/sway enough.</p>
<p>The setup is pretty minimal, there&#39;s the basic desktop following the duo tone colors I use everywhere, an off-white tone ranging in #dddddd - #eeeeee and a dark gray tone ranging in #121212-#333333, should probably create a good color pallete to share with people, the accent color is a random color I picked from <a href="http://colors.reaper.im/">colors</a> and changes quite frequently so it&#39;s also an environment variable so I can change it at any time by  executing an <code>echo export ACCENT_COLOR=colorhex</code> to the shell profile and reload the sway / openbox config. </p>
<p>Basically what the profile looks after a while.</p>
<pre><code class="language-sh">export ACCENT_COLOR=#3CA60C
export ACCENT_COLOR=#B07AB2
export ACCENT_COLOR=#9FD0B1
... goes on till I clear it up
</code></pre>
<p>The primary <strong>application launcher</strong> on both is <code>dmenu</code> and sometimes I setup rofi when I have the time, the <strong>browser of choice</strong> is firefox and chromium as backup (because I develop web apps), the same on Mac with safari as an additional test browser. </p>
<p><strong>I don&#39;t use a login manager / display manager</strong> (lxdm,lightdm,etc) , I use the shell profile to check for a logged in user and then take access of the display. This either launches Openbox with xinitrc or launches Sway with Wayland environment in place.</p>
<p><strong>Wallpapers are just solid colors</strong> on the linux setups, again a dark gray in the above range. 
On the mac though, I change them frequently with a random one from <a href="https://wallhaven.cc/">wallhaven</a></p>
<h2 id="new-user-what-do-i-use">New User, what do I use?</h2>
<p>I&#39;d direct you towards <a href="https://linuxmint.com/">Linux Mint</a> to start off with, and there&#39;s also <a href="https://getsol.us/home/">Solus</a> but it may or may not directly work with your hardware so try both of them out with a live disk and then initiate an install, an unresponsive wifi/network hardware is quite common so you might need more than just the default install to get either of them working, though Linux Mint generally hasn&#39;t given me an issue yet but, don&#39;t directly execute an install without testing your hardware on the live disk</p>
<p>I guess that&#39;s about what I wish to say about linux right now, I will be going over Linux Distro&#39;s that I found interesting but didn&#39;t make it to the list of favorites. </p>
]]>
      </description>
      <pubDate>Mon, 22 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210301-This-Weekend-in-the-BarelyHuman-Dev-Labs---March,-20th-and-21st</guid>
      <title>This Weekend in the BarelyHuman Dev Labs - March, 20th and 21st</title>
      <link>https://reaper.im/blog/20210301-This-Weekend-in-the-BarelyHuman-Dev-Labs---March,-20th-and-21st</link>
      <description>
        <![CDATA[<p>This weekend was rather lazy , I had a few projects I wanted to complete, though I slept through most of the day on both days and spent about 4 hours watching the Snyder Cut JL and 1 hour thinking about what on earth was WB thinking with the initial release.</p>
<p>Back to the update.</p>
<h1 id="spotsync">SpotSync</h1>
<p>This is a very niche project that I picked up that serves the purpose of keeping my Spotify library and a playlist that I share with people in sync. The concept is simple, it syncs the library to a playlist that&#39;s it, nothing else. It&#39;s basically done but not tested and nope, you won&#39;t find it on my Github because I won&#39;t be making it public unless I&#39;m done testing it, which will be sometime this week so that&#39;s one and it isn&#39;t deployed yet so no links right now. Told you, lazy weekend. </p>
<h1 id="mytag">MyTag</h1>
<p>I don&#39;t normally contribute to other open source projects I just use them to learn stuff but I thought I&#39;d help a fellow developer out this time so I spent a few hours on a few issues of this project. 
<a href="https://github.com/cryptoboid/mytag">MyTag</a></p>
<p>Pretty great concept, though the app needs a little more polishing and tweaking to be feature complete, which the original developer is working on, hoping I can find more time to help such projects instead of just re-creating my own versions of various existing tools.
(talking about TillWhen)</p>
<h1 id="tillwhen">TillWhen</h1>
<p>Minor security patches and version upgrades for a lot of things, I do have to make the UI a lot more consistent so I&#39;m kinda stuck as to whether I should work on the Multi Slack workspace support or Work on the teams concepts , also kinda understand why almost all free services online have ads on them, cause people won&#39;t support it with donations when being provided for free. </p>
<p>Anyway, guess I&#39;ll be working a day job forever if I want to keep the projects free to use. </p>
<h2 id="making-tillwhen-opensource">Making TillWhen Opensource?</h2>
<p>I did announce and also mentioned it on the <a href="https://tillwhen.barelyhuman.dev/about">about page</a> that tillwhen will be getting a self hosted version and I do plan on making it open source but I wanna make sure I get rid of any security vulnerability that I can find myself before I do hand it over to the community to see. I trust the community with my other projects because they are tools and store data mostly on the browser, this one has people&#39;s daily logs , while an attacker could do a lot of damage it&#39;s still something I need to worry about and not something I can just let loose. </p>
<p>Overall point, yes, TillWhen will be opensource and come with a self hosting alternative after I&#39;m sure that any edge case (hopefully all) security concerns are out of the picture. While there&#39;s barely any personal information tracked by the app, for someone who routinely logs onto tillwhen, the data can be used maliciously.</p>
<h1 id="the-blog">The Blog</h1>
<p>RSS feeds were added to blog on request by a friend from <a href="https://fosstodon.org/@TheCam/105916599587324953">here</a> , also re-built <a href="http://barelyhuman.dev/">barelyhuman.dev</a> to follow the new design style I have on all apps and go rid of any deps on Javascript other than the themer (dark and light mode toggle)</p>
<h1 id="rest-of-the-life">Rest of the life</h1>
<p>Overall just played CS:GO all night and worked on the above mentioned things in the morning, pretty fun weekend.</p>
<p>Adios!
          </p>
]]>
      </description>
      <pubDate>Mon, 22 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210302--Handling-heavier-tasks-</guid>
      <title>Handling heavy memory tasks asynchronously</title>
      <link>https://reaper.im/blog/20210302--Handling-heavier-tasks-</link>
      <description>
        <![CDATA[<p>This is going to be both a post to point you to a library I made and also point you to a solution for handling heavier tasks. </p>
<p><strong>Disclaimer: This is one of many solutions that you can use, I&#39;m just talking about this one since I end up using this a lot more than other solutions, I will mention other solutions though</strong></p>
<p>As programmers we are given problems that need to be solved or we discover a problem and then sit down to solve it. Once such problem has always been load management, we&#39;ve got various tools that handle it for us at different levels. </p>
<p>You&#39;ve got load balancers for network requests, you&#39;ve got the ability to scale vertically and horizontally in terms of parallel containers or k8 nodes but let&#39;s come to the small section of this, handling load in your actual code. </p>
<p>I&#39;m not sure if you&#39;ve come across this but a lot of times you&#39;ve got like 100s of functions that need to be run parallely or sequentially or even cases where the memory can&#39;t handle this run. </p>
<h3 id="context">Context</h3>
<p>A few days back I was working on a small dummy replication server on my Raspberry Pi which hardly had about 100-250mb ram left with all the other hosted services running on it. The replication server was to run my spotify , get all playlists, go through each playlist to get all the tracks and then match these on Apple Music and then sync them to my Apple Music. Why do this? I accidentally deleted my Apple Cloud library (My bluetooth keyboard malfunctioned and instead of deleting a single track, I deleted the entire library) and I need all the tracks back so I wasn&#39;t going to do it one by one and I could use SongShift but then it&#39;s slow and I&#39;d have to setup multiple runners on it for each playlist and then run them manually so I figured I&#39;d just write a small server for it.</p>
<h3 id="problem">Problem</h3>
<ul>
<li>Limited amount of RAM: 100-250MB </li>
<li>Number of tracks to process: 2500</li>
<li>Matching each track takes about : 1s</li>
<li>total time to be 2500 seconds if done sequentially </li>
<li>memory usage per track search = 500kb , so about 125MB total to import all</li>
</ul>
<p>The problem? I have close to no ram left on the rasp when this runs and using the other hosted services becomes hard cause they need to shift to swap and then it lags. </p>
<h3 id="solution">Solution?</h3>
<p>There&#39;s quite a few solutions here </p>
<ul>
<li>Message Queues</li>
<li>In Memory Batches</li>
<li>DB Queues</li>
</ul>
<h4 id="message-queues">Message queues</h4>
<p>Good solution but then I need to add RabbitMQ or redis + msg queue, setup a worker to listen to the queue and a server sending the instructions to the queue, limit the queue to not process more than 10-20 tracks at once. </p>
<h4 id="db-queues">DB Queues</h4>
<p>Similar to the message queues but instead I add rows to a <code>queued</code> table of any existing database on the device and the worker keeps checking it after 10-20 mins to see if it has any new queued tasks and mark them complete when done with , this is simpler to implement and would be a viable solution if you need a  solution that&#39;s crash resistant. Message queues though might loose it&#39;s messages on crash in certain cases so this might be the most reliable solution to go with. </p>
<h4 id="in-memory-batches">In Memory Batches</h4>
<p>Now, as the name says, its similar to the above two but we do it in-memory and yes, I&#39;ll loose all progress on a crash but this particular use case doesn&#39;t need to know if it&#39;s started again so we can go ahead with this and it&#39;s simpler if you are doing the same operation again and again.</p>
<h3 id="implementation">Implementation</h3>
<p>You cut down the array of items into slices of certain amount, let&#39;s say I want to process only 20 tracks at once, then I run the async process and wait for the first 20 to complete. We then add the next 20 and process them and continue in the same manner but do it only in memory and this reduced the usage down to about 10mb of usage while this is running, leaving the remaining memory free to be used by other hosted apps.</p>
<p>For synchronous you could just slice the array and run a while loop waiting for one to complete before the other starts but incase of async this can be a little more code to write than normal so you might want to use a library. </p>
<p>I would recommend using one of the following </p>
<ul>
<li><a href="https://www.npmjs.com/package/p-map">p-map</a></li>
<li><a href="http://bluebirdjs.com/docs/api/promise.map.html">bluebird&#39;s promise.map</a></li>
<li><a href="https://barelyhuman.github.io/conch/">conch</a></li>
</ul>
<p>Though, <strong>p-map</strong> and <strong>bluebird&#39;s promise.map</strong> will allow you to maintain a queue that always have the mentioned number of promises waiting to be completed so it works like an in memory queue, on the other hand <strong>conch</strong> will maintain batches and will process it one batch after the other instead of a continous queue, both work well in the case , I just prefer the batching.</p>
<p>Another live example of this being used would be <a href="https://music.reaper.im">music</a>&#39;s import logic, which does something similar but to search youtube with the provided spotify link</p>
]]>
      </description>
      <pubDate>Tue, 16 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210301-Weekend-Updates----March-6th-and-7th,-2021</guid>
      <title>Weekend Updates -  March 6th and 7th, 2021</title>
      <link>https://reaper.im/blog/20210301-Weekend-Updates----March-6th-and-7th,-2021</link>
      <description>
        <![CDATA[<h2 id="tillwhen">TillWhen</h2>
<p>This week, I wasn&#39;t really feeling like developing or working on TillWhen so there are no specific updates there other than a small patch that adds to the authentication check during first render of the app. </p>
<h2 id="new-additions">New Additions</h2>
<p>The past week was mostly me working on <a href="http://themer.reaper.im/">themer</a> and making fixes and making the code more cleaner and readable in case someone else wants to fix something that isn&#39;t working as they expected it to. </p>
<p>Another project that was created yesterday was <a href="https://github.com/barelyhuman/conch">conch</a>, a micro library to handle sequential batch processing of promises for systems that can&#39;t handle processing like a 100 promises at once, and also something I needed to regulate for cases where I have to preserve memory usage, though the current logic can be improved a lot. </p>
<h2 id="modified--feature-upgrades">Modified / Feature Upgrades</h2>
<p>Other than adding themer to most maintained projects, <a href="https://music.reaper.im">music</a> got a UI upgrade and now supports importing spotify playlists into the queue, you can either replace the entire queue with the playlist or add the tracks from the playlist to the existing queue. The keyboard shortcuts it had still work but are not listed on the UI right now , since I haven&#39;t figured a good way to show them on the current UI style without making it look odd.</p>
<p>Minor work includes template updates to the <a href="https://github.com/barelyhuman/ftrouter-templates">ftrouter-templates</a> repo, and this includes an experimental cli command that was added to the current <code>master</code> branch of <a href="https://github.com/barelyhuman/ftrouter">ftrouter</a>, it now allows you to init a folder though this is not in any of the official releases tags, also I finally plan to sort the of ftrouter using some cli tool framework first before I release ftrouter onto the npm registry. You can still install it using the git repo as the repo consists of the compiled source.</p>
<pre><code class="language-sh">mkdir -p new-project
cd new-project
ftrouter --init # which is a shorthand for `ftrouter --init -d .`
</code></pre>
<p>For an example on how ftrouter works you can check the <a href="https://github.com/barelyhuman/music-server">music-server</a> or the minimal template&#39;s example which includes both query and param cases as well. </p>
<p>That&#39;s all that I was able to do this weekend, though I plan on focusing a little more on TillWhen next week, let&#39;s see if I do.
          </p>
]]>
      </description>
      <pubDate>Mon, 15 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210304-Themer-and-how-you-can-handle-dark-mode-a-lot-more</guid>
      <title>Themer and how you can handle dark mode a lot more gracefully</title>
      <link>https://reaper.im/blog/20210304-Themer-and-how-you-can-handle-dark-mode-a-lot-more</link>
      <description>
        <![CDATA[<p>A few days back I was basically redesigning the long lost <a href="https://todo.reaper.im">todo</a> app from my repositories and
I ended up liking my selected color scheme and the dark variant of it. This lead to a simple dark and light toggle that I wrote in about 20 lines of JS, by simply changing a key in the local storage and handling that change and edge case accordingly.</p>
<p>10 mins after this, I realised the the <a href="https://commitlog-web.herokuapp.com">commitlog-web</a> could take advantage of the new color scheme and the web version of it is written in golang and html templates so I needed something vanilla so I just ended up using the above code from the todo implementation. At this point, it&#39;s all good, but then a small issue. It&#39;d take the stored theme instead of the system preferred theme only and for someone who&#39;s theme changes automatically over the course of the day , this was a problem. </p>
<p>Now most people would be fine with just the <code>prefers-color-scheme</code> media query but now I don&#39;t assume what scheme the user would want to use for my particular app so I want him to be able to choose between system, light, dark and now this is where <code>themer</code> got created. </p>
<p>It&#39;s like 200 lines and you can probably understand by reading the source code , but I&#39;ll get through the algorithm just in case.</p>
<p><a href="https://github.com/barelyhuman/themer/blob/dev/src/index.js">Source Code</a></p>
<p>Also, you can just install <a href="https://themer.reaper.im">themer</a> and use it if you&#39;d find that easier but here goes.</p>
<p><strong>Requirements</strong></p>
<ol>
<li>Ability to switch between system,light,dark.</li>
<li>As a developer, the developer experience to just add in one button , point the library to it and have it work seamlessly.</li>
<li>As a developer, the ability to customize the toggles when needed so a function export that can handle the same context.</li>
<li>Permanent storage of the selected theme.</li>
</ol>
<p><strong>The Plan</strong></p>
<ol>
<li>Since there&#39;s a need for context, we are going to use a Prototype Function declaration for this library (more on that in a few mins).</li>
<li>Ability to customize the button, so the button won&#39;t be created dynamically but picked from the config provided to the library, though I wanted a quick setup so the library will handle the icons inside the button, just not the button creation and styling.</li>
<li>Write a function that can be exposed to the instance so that if needed, the person can create custom toggles programmatically.</li>
</ol>
<p><strong>Code Flow</strong> </p>
<ol>
<li>We define a prototype function first. A prototype function is basically the vanilla js way of making/writing classes , give you the ability to add pre-defined methods to an instance created via the function as a constructor, an example of this would be <code>Date</code></li>
</ol>
<p>So, first piece of code.</p>
<pre><code class="language-js">
<span class="token keyword">function</span> <span class="token function">Themer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre>
<ol start="2">
<li>We need it to accept a config so that we can select if we want to handle the toggle ourselves or we want the user to handle it for us. Also, we will see if there&#39;s an existing theme value the user has or not. </li>
</ol>
<pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">Themer</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
 <span class="token keyword">let</span> element <span class="token operator">=</span> config<span class="token punctuation">.</span>trigger<span class="token punctuation">;</span>
 <span class="token keyword">if</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// Check if the trigger was passed a class string or an id string and convert it to a proper html node ref</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> config<span class="token punctuation">.</span>trigger <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>

<span class="token comment">// existing state for the theme , fallback to system if nothing is found</span>
<span class="token keyword">let</span> defaultState <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'system'</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre>
<ol start="3">
<li>Now, for the actual toggle, all we do is set the <code>body</code> tag to have an attribute called <code>data-dark-mode</code> and if this is present, your <code>css</code> can over-ride the default light mode variables or you can write custom css with this as a selector.</li>
</ol>
<pre><code class="language-css"><span class="token selector">body[data-dark-mode] button</span> <span class="token punctuation">{</span>
 <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>
 <span class="token property">color</span><span class="token punctuation">:</span>#121212<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>though, just resetting the variables would be easier, you can find an <a href="https://github.com/barelyhuman/themer/blob/dev/style.template.css">example here</a></p>
<ol start="4">
<li>All that&#39;s left is to find out which theme we are on and which the next one is supposed to be and this is done on the click on the trigger, also, remember we have to expose the function so we have to isolate that logic and also we need to make sure the same functions are also executed when the system preference changes if the set theme is on <code>system</code></li>
</ol>
<p>No use posting the snippet cause that&#39;s the whole <a href="https://github.com/barelyhuman/themer/blob/dev/src/index.js">index.js</a> which you can read.</p>
<p>Hope you liked the post, </p>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Thu, 11 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210301-Git-Workflow</guid>
      <title>Git Workflow</title>
      <link>https://reaper.im/blog/20210301-Git-Workflow</link>
      <description>
        <![CDATA[<p>There&#39;s quite a few ways to work with git but here&#39;s how I go about maintaining the repositories that I work with or maintain as a solo developer while building personal projects. 
I specify <strong>personal projects</strong> since the git workflow while working with a team differs.</p>
<p>Also, I&#39;ve actually talked about this flow, one on one with a lot of people so It&#39;s easier to write it down once for people to refer to. </p>
<h2 id="commands">Commands</h2>
<p>Let&#39;s get over the list of commands that you need to know and understand to go ahead with this flow. </p>
<ul>
<li><code>git pull</code> (combined with the <code>--rebase</code> flag, used when re-syncing with the remote)</li>
<li><code>git remote</code> (manipulate the existing remote urls or adding a remote)</li>
<li><code>git push</code> (push to the upstream/remote)</li>
<li><code>git merge</code> (rarely used, but good to know anyway)</li>
<li><code>git rebase</code> (specially the <code>-i</code> option, to edit and re-arrange the commit history)</li>
<li><code>git commit</code>  (make commits, i don&#39;t use <code>-m</code> ,i prefer writing descriptions for my commits)</li>
<li><code>git status</code> (current working tree status)</li>
<li><code>git diff</code> (check diffs in the terminal when working on the raspberry pi)</li>
<li><code>git branch</code> (creating and deleting branches)</li>
<li><code>git checkout</code> (to move from branch to branch)</li>
<li><code>git restore</code> (in newer versions of git, so upgrade if you don&#39;t see this command or it errors out)</li>
</ul>
<p>Now those are basically all the commands I use, <code>git log</code> would be another but then I use <a href="https://github.com/barelyhuman/commitlog"><code>commitlog</code></a> now so that&#39;s out of the picture for most part right now. </p>
<p>When I say <strong>know  and understand</strong>, I expect that you&#39;ve at least tried out the command with a few flags that each of these provide. </p>
<p>I&#39;ll get into detail.<br />For example, you&#39;ve all probably used <code>git pull</code> and <code>git push </code> enough by now. I would like you to go create a test repository make some changes on the remote , either via github&#39;s ui or on a different computer and go execute a normal <code>git pull</code> on your repository. </p>
<p>At this point , type in <code>git log</code> and you&#39;ll see the last commit was a fast forwarded <code>Merge</code> commit that got created because you tried to sync with a branch that wasn&#39;t local. Now a lot of people don&#39;t realise this but git defaults to <code>merging</code> in case of overlaps and this creates a lot of un-needed history on your repository and also confusion when browsing through them. The option to use? <code>git pull --rebase</code> , you could just set your <code>git</code> to default to rebasing but we&#39;ll get to why I avoid that and use the flag explicitly. </p>
<h2 id="flow">Flow</h2>
<p>Getting to the flow, let&#39;s start with an empty repository.</p>
<ul>
<li>Create a <code>dev</code> branch using the <code>git branch</code> command </li>
<li>Push it to the remote if it isn&#39;t already pushed. </li>
<li>Create a <code>feat/&lt;new-feature&gt;</code> or <code>fix/&lt;new-fix&gt;</code> branch as need, <code>&lt;new-feature&gt;</code> and <code>&lt;new-fix&gt;</code> replaced with the name accordingly.</li>
<li>Best part, write the implementation or fix.</li>
</ul>
<p>At this point, if I&#39;m working on Github, i&#39;d create a pull request, then rebase merge with the base branch if it&#39;s possible, if not then it&#39;s a squash merge locally if the number of commits that are to be rebased are over 10 commits. </p>
<p><strong>Reason</strong> - Rebasing 10 commits, while going through each commit incrementally might not work if you&#39;ve been working on the feature for a long time or shifting to other projects and there&#39;s code snippets you don&#39;t fully understand, so rebasing with conflicts over 10 commits might not be easy to go ahead with. </p>
<p>Though this is rarely the case with the repos I maintain, I did have this issue before when I was still learning git. </p>
<p>Now, the current feature implementation when maintained on a seperate branch has a max of 2-3 commits that are all seperated properly, how and why?</p>
<p><code>git commit --amend</code>  and <code>git rebase -i</code> are the commands that I use the most in my workflow right now, I start off with implementing a prototype for a feature, once the prototype is done and on a feature/fix branch , it&#39;s tested right then and there and pushed to remote, because I work from multiple devices so I can&#39;t just keep it as a local copy. </p>
<p><strong>Yes, I push uncompleted features to the upstream!</strong> , but these are to branches that aren&#39;t merged and WIP. </p>
<p>Once we are back on the same implementation and making fixes to this, the changes are all made and <code>git commit --amend</code> comes into picture here. <code>--amend</code> basically modifies the previous commit and creates a new commit sha with the combined changes. Now, anyone experienced with git already knows that a new commit sha on the local and a different commit sha on the remote is a call for problems but this is basically why I never do any of this on the master/main branch even when I don&#39;t work with a team.</p>
<p>To push this modified commit you use <code>git push -f</code> or force push to the branch. 
<strong>Note: Never, I mean, NEVER force push on a branch that multiple people might be working from!</strong></p>
<p>So now, the remote is updated with the needed changes and now we can make a PR or rebase to the main branch locally and then I delete the branch both locally and on the remote, now I have one clean commit that implements the whole feature.</p>
<p>Obviously there&#39;s always going to be bugs, cases you missed, brain farts during commits that you ended up adding to the base branch, what next? force push on the base again? <strong>NOPE!</strong> </p>
<p>The only point of using force push was to maintain the remote sync with a branch that I might work on from various devices, not to edit remote history (that&#39;s a side effect when working from multiple devices).</p>
<p>If you are working from a single device, your amends are always going to be local unless the feature implementation is complete and this is how patches are supposed to work.
A more git friendly workflow is what I follow while working on sourcehut.  </p>
<p>I work with email patches when working on something like <a href="https://sourcehut.org/">sourcehut</a> instead of github, and making amends to commits is okay because it&#39;s never added to the actual repo, it&#39;s a simple email with the diffs that can change again and again, but limited to github&#39;s arch the force push on feature/fix branches are my only option right now. </p>
<p><strong>Next step</strong>,<br />So you now have a bug you need to fix, you create another branch with the <code>fix/random-feature</code> and follow the same thing, work locally , amend locally as much as you can, then push to remote and raise a PR. wait for the PR to merge, delete branch, update local branches with the base branches </p>
<pre><code class="language-sh"> &gt; git checkout main &amp;&amp; git pull --rebase origin main
</code></pre>
<p>The overall point is to maintain commits atomic and self sufficient, this allows you to <code>cherry-pick</code> onto other branches when needed, allows you to get rid of features when needed (while not always possible). 
Maintaining a good git discipline could help you avoid a lot of problems and if you are a power git user, <code>git bisect</code> could help you a lot here.</p>
<h3 id="rebasing-and-branchless-workflow">Rebasing and Branchless workflow</h3>
<p>This workflow is something I picked up a few months ago and since I use the macbook for everything right now, because I don&#39;t go around that much. The max it changes is from macbook to the raspberry pi that I run and test the cli apps on.</p>
<p>In this workflow, I don&#39;t need to really create branches or push to remote for sync with other devices, I picked this up from <a href="https://drewdevault.com/">Drew DeVault</a>.</p>
<p>Basically, You don&#39;t push the commit unless it&#39;s complete and just keep moving it up in the interactive rebase or squash it while working on something else, so the origin only points to features that have been tested and are okay to be added to the upstream, everything else stays on the local.</p>
<p>Drew talks about it in detail on his post <a href="https://drewdevault.com/2020/04/06/My-weird-branchless-git-workflow.html">My unorthodox, branchless git workflow</a>, which is basically what I&#39;m using other than the patch part , cause most projects of mine are on github, will move them to sourcehut when I can, but I don&#39;t want to move every repository I have to sourcehut just one&#39;s I think are suitable enough to be maintained longer. Just to have a cleaner collection. </p>
<p>For now, that&#39;s it. 
BTW, we&#39;ve got comments now, scroll down to add one.</p>
<p><strong>Adios!</strong></p>
]]>
      </description>
      <pubDate>Mon, 08 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210300-Why-do-I-end-up-re-designing-everythi</guid>
      <title>Why do I end up re-designing everything ?</title>
      <link>https://reaper.im/blog/20210300-Why-do-I-end-up-re-designing-everythi</link>
      <description>
        <![CDATA[<p>I&#39;ve done this quite a few times when it comes to implementing minimal design across tools and apps that I build.
So in <a href="https://reaper.im/blog/20210305-UI-Overhaul">this post</a> I talked about why I re-designed the todo app, when all I wanted to do was a add a filtering functionality but then I redesigned the whole thing.</p>
<p>And technically, the idea for the colors was taken from the UI i was writing for the <a href="https://mark.reaper.im">markdown editor</a> which then ended up being the inspiration for me to modify the UI of <a href="https://commitlog-web.herokuapp.com">commitlog-web</a> through which I created a small library called <a href="https://themer.reaper.im">themer</a> and now I&#39;m sitting here writing this post indirectly back linking to everything I&#39;ve created in the past 1.5 days just because I liked the input style I made for a markdown editor.</p>
<p>And this has happened before, I got inspired by <a href="https://lancerlist.co/">lancerlist.co</a> and ended up cloning that color scheme to all the apps I built that week/month. </p>
<p>From memory, I probably built a css resets library that cloned the color scheme of lancerlist and maybe a dummy hiring network and a covid tracker that probably doesn&#39;t work anymore.</p>
<p>I know it&#39;s not bad to do make something look good.<br /><strong>but!</strong> then I think that I do end up spending a lot of time doing this re-design and making things look clean than actually working on something meaningful that&#39;d help a lot of people instead of just building stuff that I&#39;d use, though none of them were ever launched or promoted as products / tools for the greater good so maybe I&#39;m to blame for that.</p>
<p>Like, I could write a  new <a href="https://repl.it/">repl.it</a> clone that didn&#39;t need you to sign up and create a new repl and then get to coding but just open a url and boom, a repl to test snippets on, but then obviously the other guys wants to make a living out of it so I can&#39;t blame him but nope, I&#39;m going to write a dark mode setup library (cause there&#39;s not enough of them already)</p>
<p>I mean, I learn a lot while building these smaller tools and apps but then it&#39;s not something I can go to the market with or actually earn from it. Obviously there are developers like <a href="https://github.com/sindresorhus">Sindre</a> and <a href="https://drewdevault.com/">Drew Devault</a> that actually make a living out of open source projects , both with totally different methods but both are full time open source developers.</p>
<p>Argh, Offtopic!</p>
<p>I was talking about building useful stuff for people to use, that reminds me <a href="https://github.com/barelyhuman/commitlog">commitlog</a> reached about 48 stars at the time of writing this, so that&#39;s really nice but let&#39;s see if I can build a lot more tools that work well in everyone&#39;s workflow. </p>
<p>I want to try writing a bundler for once, the existing ones are good but then they all assume the developer workflow a lot. Other than webpack and rollup, which are really extensible and hence people create wrappers around them. Anyway, I need to know what would be a better idea ? An online instant repl environment or a bundler?</p>
<p>I guess you can mail in the answer, but for now.<br /><strong>Adios!</strong>
          </p>
]]>
      </description>
      <pubDate>Sun, 07 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210305-UI-Overhaul</guid>
      <title>UI Overhaul</title>
      <link>https://reaper.im/blog/20210305-UI-Overhaul</link>
      <description>
        <![CDATA[<p>I&#39;m not really good at post titles, so going to keep them short from now.</p>
<p>A really old project of mine started gaining a bit of attention the past few days and I thought that I&#39;ve been planning on making it look good for quite a while, I should just sit and redesign it once and for all. </p>
<p>So, when I woke up at 4 , unable to go back to sleep, I decided to make a design change. </p>
<p><a href="https://old.todo.reaper.im">Old Todo</a> , this is what it looked like and here&#39;s the new one, <a href="https://todo.reaper.im">Todo</a></p>
<p>I&#39;ll add an image for everyone else to have a look at</p>
<p><img src="/assets/todo-new-image.png" alt=""/></p>
<p>So let&#39;s go through everything that&#39;s there. </p>
<h1 id="features">Features</h1>
<ul>
<li>the obvious one first, Dark Mode Support </li>
<li>Addition of tasks, it&#39;s a todo list (what were you expecting?)</li>
<li>Filter by state, you toggle between, All, Completed, Pending</li>
<li>Power menu to change theme and filter by state(<strong>coming soon</strong>)</li>
<li>PWA, you can install it if you&#39;re using chrome on desktop and Safari (Add to Home) / Chrome (Add to Homescreen) on iOS and Android respectively</li>
<li>Offline support (cause pwa), and your tasks stay in your browser, there&#39;s no sync, though you can share an encoded link to people who you&#39;d want to share the tasks with. </li>
<li>Import tasks from shared URL into your task (<strong>coming soon</strong>)</li>
</ul>
<p>And as always, it&#39;s free. Though you should try supporting the DEV!</p>
]]>
      </description>
      <pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210305-reaper.im---Seamless-posts-addition</guid>
      <title>reaper.im - Seamless posts addition</title>
      <link>https://reaper.im/blog/20210305-reaper.im---Seamless-posts-addition</link>
      <description>
        <![CDATA[<p><img src="/assets/new-post-reaper.png" alt=""/></p>
<p>We&#39;ve had this blog for a while now and the typical flow of writing a post is me going to <a href="https://mark.reaper.im">Mark</a>, writing the post markdown, exporting the file, adding the metadata to the file which involves the title,publish status, date, and then pushing the repository after checking if the above were done properly. </p>
<p>Though Mark exists just because I&#39;ve used other tools and Typora is the only one that comes close to being lightweight and aesthetic and while I do use it while I&#39;m on the Mac, I do write a lot of these posts from an iPad and since Mark is just a web-app it works well, as for pushing the repo and creating the file, all is done using <a href="http://gitpod.io">gitpod</a>. It&#39;s pretty easy to do but yeah, a good amount of window switching.</p>
<h2 id="adding-integrations-to-mark">Adding Integrations to Mark</h2>
<p>I like how the new UI on it looks so my second plan was to add the ability to login via github on Mark, select a repository you&#39;d like to add the markdown too and then giving the path in the repository which would&#39;ve been great and I probably will do that sometime, but I wanted a little more automation since the meta data addition would still be needed and I wouldn&#39;t want to generalise mark to have datepicker when it&#39;s just for a niche use-case. Though I do have a plan for something similar so let&#39;s hope I get enough time this weekend to start with it.</p>
<h2 id="scraping-buymeacoffee">Scraping BuyMeACoffee</h2>
<p>The first approach was something I mentioned in <a href="https://reaper.im/blog/2021-02-22-Go-Lang-and-Web-Scraping">this post</a> which involved scraping post data from another site who&#39;s editor I liked. While that would work we&#39;d loose offline capabilities of the repository, which I didn&#39;t want too and adding a scheduled sync action wouldn&#39;t be optimal either. </p>
<h2 id="the-easiest-approach">The easiest approach</h2>
<p>The last approach was to just use a password to log into the site, add posts from a simple text area and then push it into the repository using github&#39;s API, though there were a few security risks. </p>
<ol>
<li>The password could be bruteforced.</li>
<li>The attacker could throw as many files as he wanted to my repo. </li>
<li>Obviously, he could post whatever he wanted</li>
</ol>
<p>So, we put a little more thought into it and ended up blocking this a little bit. The site uses an OTP approach instead, so it mails to one of my random non-public emails a otp that lasts for like 45-60 seconds, this kinda gets rid of the bruteforce but then it&#39;s just 6 digits, we&#39;ve got computers who can kinda get through this so the next block was to create all these posts to a subset branch and 
create a PR for the main branch. </p>
<p>This does 2 things. </p>
<ol>
<li>You cannot post directly to the deployed public version.</li>
<li>I&#39;m notified for the PR, so I&#39;d know if there was activity that wasn&#39;t from me.</li>
</ol>
<p>Again, there&#39;s still things that can be done that an attacker could do but a little consideration on blocking them for a while is better than leaving an open door. </p>
<p>Thus, the last post you saw was just me testing the whole flow after writing it all. Still got work in terms of security that could increase the friction for an attacker but I&#39;ve got other tools I need to work on so we&#39;ll get to it as soon as I get time. </p>
<p>Adios!
          </p>
]]>
      </description>
      <pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210304-If-you're-seeing-this,-it-all-worked!</guid>
      <title>If you're seeing this, it all worked!</title>
      <link>https://reaper.im/blog/20210304-If-you're-seeing-this,-it-all-worked!</link>
      <description>
        <![CDATA[<p><a href="https://reaper.im">https://reaper.im</a> now has it&#39;s own inline editor for me to write blog posts with. </p>
<h3 id="supports-markdown">Supports markdown</h3>
<p>and obviously since you do see this post up on the blog right now, it all worked out well.
          </p>
]]>
      </description>
      <pubDate>Thu, 04 Mar 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/2021-02-22-Go-Lang-and-Web-Scraping</guid>
      <title>Go Lang and Web Scraping</title>
      <link>https://reaper.im/blog/2021-02-22-Go-Lang-and-Web-Scraping</link>
      <description>
        <![CDATA[<p>Scraping websites is fun, but then I rarely ever tried doing it since setting up chrome and firefox to run headless on heroku is a daunting task and quite time taking in terms off testing. Which I did do when I made this <a href="games.siddharthgelera.com">Epic Games Online Store Scraper</a> and as you can see it&#39;s quite slow because it takes time to live scrape, and while I could&#39;ve had a database setup to store the prices the problem is I&#39;d have to run a sync every-time anyway because the store changes price and new free games are added at any point so a live scraper was the plan but then epic started changing the view structure every now and then and it became hard to maintain it and so it&#39;s now just there for me as a reference if I ever need to create a scraper using <code>Nodejs</code> and <code>puppeteer</code> again. </p>
<h2 id="why-talk-about-it-now">Why talk about it now?</h2>
<p>No reason to bring a project that&#39;s about a year old , into the picture now, right?
Well, If you know how this blog works internally, it&#39;s just a nextjs app that renders the markdown text into react components, I should shift to <code>mdx</code> though. I will be cleaning the code of the site soon, it&#39;s quite repetetive right now and should be refactored. </p>
<p>So, back to topic. The whole blog section is just 2 files of <code>.js</code> that renders content from <code>.md</code> files from the same repo and while I like the approach, since everything I write is in the same repo, it can be taken offline and you can run the blog locally if you like my posts that much.... doubt that. </p>
<p>But i think being able to take it offline is a big advantage, though I was going throught <a href="https://buymeacoffee.com">BuyMeACoffee.com</a> the other day and I remembered that I made 2 posts regarding my released projects there when this blog wasn&#39;t really deployed and I liked their editor. </p>
<p>This is where the scraping comes in, they do have exposed api&#39;s but it doesn&#39;t expose the user posts and quite a few people have asked for it so they might add it in the future releases though for now, we are going to scrape these posts I&#39;ve got there. </p>
<h2 id="you-wrote-a-scraper-with-go-why-should-i-care-">You wrote a scraper with Go, why should I care ?</h2>
<p>Ah, because it didn&#39;t need a huge ass browser to be run on heroku. </p>
<p>The whole </p>
<blockquote>
<p>Build everything with the language you wish to learn </p>
</blockquote>
<p>concept really works well for me and since we are on the Go Lang train from the past few months, I gave it a shot and used a browser package the go community offers called <a href="https://github.com/headzoo/surf">surf</a> and it&#39;s basically a programmatic browser , so it doesn&#39;t need a headless instance in the first place and acts like a browser. If i&#39;m not wrong someone would&#39;ve already made a testing suite using its api for web apps. The best part, it&#39;s a simple go lang package so it got compiled with the remaining program, so now I have a single binary file of a few MBs running on heroku with no other deps needed. </p>
<p>No linux setup required , no waiting for 20 more apt updates and packages to install so that chrome can run headless, one single binary and it&#39;s fast, like the current instance of the worker is running for free, so we have the 10 second wake up time from heroku but that&#39;s about it. It doesn&#39;t take any longer than that. </p>
<p>You can check the api by clicking on the link below. Obviously wait for the 10 seconds if the container has to cold start, but then your reloads will take no time, it spawns a browser, opens the url, scrapes and shows the results in under 2 seconds. I&#39;m impressed, there&#39;s no caching logic in that code either (should add though)</p>
<p><a href="https://bmc-api-worker.herokuapp.com/posts">Posts</a> - All Posts</p>
<p><a href="https://bmc-api-worker.herokuapp.com/posts/mailer-simple-e-mail-microservice">Post Data</a> - Example Post Data</p>
<p>and so I think I&#39;m going to do a lot more scraping now since it was a breeze to setup, use and quite performant without any direct optimizations that I&#39;ve made. </p>
<h2 id="you-forgot-to-tell-what-youre-going-to-do-with-the-scraper">You forgot to tell what you&#39;re going to do with the scraper.</h2>
<p>Oh yeah, so now since I have the data from there, I realised that their post engine is kinda limited in terms of markdown recognition and also, directly reading from the API conflicts with my thinking of offline availability, so I plan on running a GitHub action every 3-4 days to go through this worker, get the data, create a markdown from the received html data and save it as a file into the repo if it doesn&#39;t already have the post. This sticks to the offline thinking for someone who&#39;d like to be able to go through them offline and also I get to use the BuyMeACoffee&#39;s editor to make decent posts, won&#39;t use it for the posts that need code snippets etc, cause that won&#39;t work with their current editor.</p>
<p>That&#39;s it for now. </p>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Mon, 22 Feb 2021 04:44:43 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/ec2-setup-checklist</guid>
      <title>Checklist for EC2 Base Setup</title>
      <link>https://reaper.im/blog/ec2-setup-checklist</link>
      <description>
        <![CDATA[<ul>
<li class="checkbox-list"><input type="checkbox" ></input> Create an ec2 instance (obviously,you braindamaged alien) </li>
<li class="checkbox-list"><input type="checkbox" ></input> Enable SSH (random port) and HTTP 80 on the instance.</li>
<li class="checkbox-list"><input type="checkbox" ></input> Increase the ssd/EBS size to a min of (20/40) Gigs</li>
<li class="checkbox-list"><input type="checkbox" ></input> Add a swap file to the system</li>
<li class="checkbox-list"><input type="checkbox" ></input> Install dokku</li>
<li class="checkbox-list"><input type="checkbox" ></input> Write a script for the dokku process for the current app (or use <a href="https://github.com/barelyhuman/dokcli">dokcli</a>, if you&#39;re completed it)</li>
<li class="checkbox-list"><input type="checkbox" ></input> Create a Dynamic Floating IP</li>
<li class="checkbox-list"><input type="checkbox" ></input> Map needed domains to Floating IP</li>
<li class="checkbox-list"><input type="checkbox" ></input> Get Repo, configure Repo to deploy to dokku </li>
<li class="checkbox-list"><input type="checkbox" ></input> Refill Cup of Coffee.</li>
</ul>
]]>
      </description>
      <pubDate>Thu, 18 Feb 2021 13:46:39 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20210206-the-most-used-tool-i-ever-wrote</guid>
      <title>The most used tool I ever wrote.</title>
      <link>https://reaper.im/blog/20210206-the-most-used-tool-i-ever-wrote</link>
      <description>
        <![CDATA[<p>I&#39;ve written quite a few mini tools</p>
<ul>
<li><a href="https://hen.reaper.im">Hen</a> - Interactive React Playground </li>
<li><a href="https:/format.reaper.im">Format</a> - A simple in browser code formatter</li>
<li><a href="https://mark.reaper.im">Mark</a> - A markdown editor (cause there weren&#39;t already 1000&#39;s of these online)</li>
<li><a href="https://github.com/barelyhuman/commitlog">commitlog</a> - Change-log generator</li>
</ul>
<p>There&#39;s a few more but we&#39;ll limit the show off to this much for now. </p>
<p>Which one am I proud of the most? None actually. </p>
<p>They were all ideas that already existed all over the web, things already built by various developers and in a much better form than I did. The reason for building them was pretty simple, to learn how they worked internally, I&#39;ve re-invented the wheel quite a few times in these cases just to understand what&#39;s going on behind the scenes and that&#39;s all they were for. </p>
<p>On the other hand, while still not proud of it, there&#39;s one specific web-app that I use a lot. It&#39;s like google for me at this point, I open this web-app first, look for what I need and then redirect myself to the needed solution accordingly. </p>
<h2 id="enough-with-the-mystery-what-is-it">Enough with the mystery, what is it!?</h2>
<p>The same website that you are reading this post on. This is the repository that has had the most commits till date and is something that I should just turn into a homepage at this point since I do end up on it every now and then anyway. </p>
<h3 id="power-menu">Power Menu</h3>
<p>The best addition to the website was the power menu or command palette that I added a few days back, you can trigger it right now by pressing CMD/Ctrl + k , sadly only possible through a physical keyboard but it opens up a simple suggestion menu that can be used to browse through the main site, added this because I avoid using the mouse as much as I can but then I don&#39;t have keyboard support on my own website, ironic much? </p>
<h3 id="collections">Collections</h3>
<p>The other addition is the collections part on the website, I keep snippets, checklists and other lists that I might need to browse through for various stuff, the blog itself has a few posts that work as reference for various issues that I&#39;ve had or other idiotic decisions I&#39;ve made while developing stuff and it works well in terms that I can browse through them when needed. </p>
<h2 id="big-deal-ive-seen-even-better-websites">Big Deal, I&#39;ve seen even better websites!</h2>
<p>Oh , definitely! I&#39;ve seen websites that are even more minimal , for example checkout <a href="https://leo.im/">Leo</a> from Vercel&#39;s Dev team, his website is really really simple and uses external tools for basically everything, but then I don&#39;t use social media much so I&#39;m limited to having everything on this instead of using Twitter as a micro blog, his github repo&#39;s speak for how much better of a developer he is. </p>
<p>I show off a little bit cause I&#39;m not as good, so the marketing is kinda needed.</p>
<p>On the more functional and beautiful side, there&#39;s websites from 
<a href="https://sindresorhus.com/">Sindre Sorhus</a>
<a href="https://paco.sh">Paco Coursey</a> - His website has no nav, it&#39;s all power menu based </p>
<p>That&#39;s not all of them and obviously, there&#39;s tons of more devs that are better than me, I wouldn&#39;t mind if one of them became a mentor of mine though the point of this specific post was about the tool I used the most.</p>
<p>Final words, not just for me , but I think every dev should have a good website which they build with a simple thinking that they are going to use it more than someone else, if you do build it with that thinking, chances are you&#39;ll add a lot of useful things to the website that others might just enjoy as well. </p>
<p>On that note, I should probably style the power menu to look a lot better, it&#39;s super flat like the rest of the site which is nice but then there&#39;s no depth even during actions and that&#39;s not nice. Any frontend dev that has any ideas regarding the power menu and the remaining website&#39;s style guide, let me know or send through a pull request.</p>
<p>That&#39;s about it for now. 
Adios!</p>
]]>
      </description>
      <pubDate>Sat, 06 Feb 2021 16:09:46 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/macbook-setup-checklist</guid>
      <title>Checklist for Macbook Setup</title>
      <link>https://reaper.im/blog/macbook-setup-checklist</link>
      <description>
        <![CDATA[<p>I wipe my Macbook quite often as a chore, this is done once every 4-5 months and helps me get rid of stuff on the SSD that I probably don&#39;t use anymore but is there just because I&#39;m not browsing throught the entire SSD.</p>
<p>This isn&#39;t a blog type post but more like a checklist of things that I need to make sure I do before I send everything on the drive to hell.</p>
<h3 id="pre---wipe">Pre - Wipe</h3>
<p>Things before wiping the system.</p>
<ul>
<li class="checkbox-list"><input type="checkbox" ></input> Backup .ssh folder, them keys are important!</li>
<li class="checkbox-list"><input type="checkbox" ></input> Make sure you make a timecapsule backup to an external ssd / flash drive </li>
<li class="checkbox-list"><input type="checkbox" ></input> Move notes from various folders to the SSD, (make a good notes app idiot!, stop putting everything here and there on the system)</li>
<li class="checkbox-list"><input type="checkbox" ></input> Don&#39;t forget getting the vimrc and vscode config, update an existing gist or for the sake of god be a little more smarter and put them up on your website, the collections section is there for a reason.</li>
</ul>
<h3 id="post---wipe">Post - Wipe</h3>
<ul>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Setup Homebrew </p>
<pre><code class="language-sh">/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;
</code></pre>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Update Brew and install Git, Wget and other base level tools</p>
<pre><code class="language-sh">brew install git yarn make fastlane

# now for the UI tools
brew install clean-me visual-studio-code google-chrome iterm2 docker vlc postgres adoptopenjdk/openjdk/adoptopenjdk8
</code></pre>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Add ZSH Suggestions </p>
<pre><code class="language-sh">  git clone https://github.com/zsh-users/zsh-autosuggestions ~/.zsh/zsh-autosuggestions

  # Add the following line to .zshrc
  source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
  
</code></pre>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Next up! Programming Language Support</p>
<ul>
<li><p>Go Lang: <a href="https://golang.org/dl/">https://golang.org/dl/</a> </p>
</li>
<li><p>Node </p>
<pre><code class="language-sh">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | zsh

nvm install --lts 
nvm install 10 
nvm install 12 
nvm alias default 12 # most projects depend on this to be the min version for me right now
</code></pre>
</li>
</ul>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Copy back the .ssh folder in place and do a dummy connect to a certain project system for the ssh identities to be loaded automatically</p>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Disable Keyboard corrections and other improvements from the keyboard settings </p>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Oh, btw, did you enable opening apps from identified developers? Do it then!</p>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Lets setup both the editors, restore the backed up editor configs from the pre-wipe, download the needed fonts for vscode and vim and while we are at hit, download Sublime Merge as well. </p>
<ul>
<li><p>Not done yet!! who is going to install vim-plug? you think the plugins will just start working!?</p>
</li>
<li><p><a href="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim">Download plug.vim</a> and put it in the &quot;autoload&quot; directory and then run the below command</p>
<pre><code class="language-sh">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
</code></pre>
</li>
<li><p>then we just open vim and run <code>:PlugInstall</code></p>
</li>
</ul>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  XCode and Android Studio, download them or check if the SSD has the latest version, if they&#39;re already there, let&#39;s create symlinks from there to the <code>$HOME/ExternalApplications</code> so we can save some space on the SSD.</p>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Open XCode,  change the derived data and archives folder to point to the external disk</p>
</li>
<li class="checkbox-list"><p><input type="checkbox" ></input>  Install ngrok - <code>brew install ngrok</code></p>
</li>
</ul>
<p>That&#39;s about it reaper, go sleep now, it&#39;s 4 in the morning, maybe start doing this a little early the next time.</p>
]]>
      </description>
      <pubDate>Fri, 05 Feb 2021 12:27:01 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/13012021-Commitlog---an-unneeded-utility</guid>
      <title>commitlog - An unneeded changelog generator utility</title>
      <link>https://reaper.im/blog/13012021-Commitlog---an-unneeded-utility</link>
      <description>
        <![CDATA[<p>Ahoy people!</p>
<p>Another post, another project, another story as to why it was built. </p>
<p>We&#39;ll be talking about <a href="https://github.com/barelyhuman/commitlog">commitlog</a>, fork or star the project just to let me know you liked / are using the project so I know if I should be dedicating my weekend hours to the project or just focus on experimenting with newer projects.</p>
<p>I&#39;ve been working with mini tools/projects a lot for the past year, somewhere around the time when I announced TillWhen and a few UI repositories that I wrote to support TillWhen. They all depend on the <em>tags as releases</em> git flow and as any person using it, changelogs are an important part of the flow. </p>
<p>The changelogs in this flow are pretty much the difference between the 2 tag references and/or if anything breaking was added that&#39;s notified with an added description. Most of these are nodejs based projects so <a href="https://github.com/vercel/release">vercel&#39;s release</a> was my primary solution to the problem of generating a changelog.</p>
<p>I was lazy to copy paste commits messages from one tag to another and had a tool do that for me, while I write posts worth 300 words. Ironic. I know.</p>
<p>Anyway, writing a Changelog is a redundant task and a lot of companies moved away from using them a while back, vercel&#39;s solution was built for their internal usage and ended up getting adapted quickly by the node dev community. Here&#39;s what release does for you if you haven&#39;t used it before.</p>
<p>It creates a cli utility that takes all your commits from a certain point to the other , generally between the last semver change to current commit ignoring any (.dev , .canary) type tags and asks you to specify whether a commit is a (major/minor/patch) change and you are asked about it per commit so if your last semver change was 100 commits away, Good Luck! </p>
<p>Though you shouldn&#39;t have such a major change anyway but I can see myself having 100 atomic commits and or canary tags that separate the 2 tags which can be 10-20 each with 3-4 commits on average and that&#39;s a lot of questions already. At this point, this data is then pushed to the projects GitHub release creation page with the new semver/dev/canary tag created for you and changes pushed. </p>
<p>It generates and fills the github release description for you in this fashion</p>
<pre><code class="language-markdown">## Major
c13e227 - some commit message for major change

## Minor
c13e227 - some commit message for minor change

## Patch
c13e227 - some commit message for a patch type change
</code></pre>
<p>Now there&#39;s definitely a easier way to avoid the questions, where you provide the commit message with the change type in it&#39;s message, so the commit message can be  <code>some commit message for major (major)</code> and the tool will not ask you to specify that commit&#39;s type or you can tell the cli to not ask any questions and it doesn&#39;t classify the commits at all resulting in something like</p>
<pre><code class="language-markdown">c13e227 - some commit message for major change
c13e227 - some commit message for minor change
c13e227 - some commit message for a patch type change
</code></pre>
<p>Now while I like <em>release</em>, and have been using it for the node projects, as I started moving to golang and gomod based projects I had a small hiccup. <em>release</em> depends on <code>package.json</code> to check for semver definition and this means I have to initialise my go projects with a package.json just so I can maintain changelogs which wasn&#39;t really pleasant , I could&#39;ve just taken a fork , fixed this case and used it but then I had a few other things that I thought needed changing and so I ended up writing commitlog.</p>
<p>So, now let&#39;s list the issues I had</p>
<ul>
<li>Needs a node project init on any other programming language (not a fan of the node_modules folder in the local setup)</li>
<li>has it&#39;s own standard for classification of commit types (not a deal breaker but still an issue)</li>
<li>limited to GitHub releases (I&#39;m moving to personal git servers and sourcehut so....)</li>
<li>asks too many questions when you forget to specify the type of change in the commit message (can be silenced with <code>-s</code> but then the others aren&#39;t classified either)</li>
</ul>
<p>4 issues, that&#39;s good enough to write one for myself and learn how to do it in a language I&#39;m not comfortable in yet aka, Go lang.</p>
<h2 id="commits-standard">Commits Standard</h2>
<p>I use a simple extract from <a href="https://github.com/conventional-changelog/commitlint#what-is-commitlint">commitlint</a>  where the commits are prefixed with a simple commit type and that&#39;s a generic commit format that almost everyone should be following , you don&#39;t have to add commitlint to your project but just writing messages with the commit standard is good enough, again it&#39;s not really needed but, it&#39;s an easier way to track commits. No more dealing with 100 questions but just making sure that I write proper commit messages, even if I don&#39;t they&#39;d still get classified as Other Commits and the proper one&#39;s still get classified as they are supposed to be.</p>
<h2 id="no-language--git-platform-dependency">No Language / Git Platform Dependency</h2>
<p>It&#39;s a binary that can be run directly without any other programming language or need for any file to maintain the semver for you, since it doesn&#39;t really do anything GitHub/GitLab specific and hence it doesn&#39;t need any network to complete it&#39;s task, instead it just uses the existing tags to define what is to be considered a start point and end point and classifies all commits in-between and outputs a markdown to the stdout , so you can pipe this to other programs like <code>grep</code> <code>cat</code> <code>echo</code> or direct it to a file with <code>&gt;</code> in unix systems</p>
<h2 id="no-type-no-problem">No type? No problem</h2>
<p>You forgot to mention the type in a commit or a certain commit has no dedicated type? it&#39;ll be categorised into <code>Other Changes</code> and you still have to just run the command , nothing blocking you and thus makes it easier for CI/CD aka, runs on any platform that can run the binary.</p>
<p>The only example you need to see is commitlog&#39;s own repository, every release changelog you see in the repository was generated by commitlog itself and you can check the GitHub actions workflow YAML to see how the binaries are packaged / how the changelogs are generated and published.</p>
<h4 id="did-i-really-need-to-make-one">Did I really need to make one?</h4>
<p>Nope, the creators of commitlint have their own cli tool as well , you can check it here: <a href="https://github.com/conventional-changelog/conventional-changelog">conventional-changelog/conventional-changelog</a> and it solves mostly all problems mentioned above.</p>
<p>Don&#39;t have to justify why I made one because I&#39;ve done that with a lot of tools already, but yeah, the go version binary is a lot more portable but still 5MB because 3MB is the go-runtime that&#39;s packaged with the binary.</p>
<p>Though I should probably make a version in portable C to reduce the binary from 5 MB to like something in KB&#39;s and maybe a lot smaller of a memory footprint. A project for later.</p>
<p>For now. Adios!</p>
]]>
      </description>
      <pubDate>Wed, 13 Jan 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/10012021-dev-in-simple-terms</guid>
      <title>Simplifying Dev for the rest of the world</title>
      <link>https://reaper.im/blog/10012021-dev-in-simple-terms</link>
      <description>
        <![CDATA[<p>I&#39;ve had a few instances where people have asked as to what I do and what my role means, and writing a post just for that one thing will short and useless so we&#39;re going to go around a few things that are common among the dev / engineers and I&#39;ll try to explain them for you in the simplest language that I can.</p>
<p>I&#39;ll give you an overview of what I do and I&#39;ll get to the remaining details.</p>
<p>As of writing this post I&#39;m a Principal Developer at a startup called <a href="https://fountane.com/">Fountane</a>, I take care of deciding architechture, tech stack (No we don&#39;t have the same stack for every project), toolchains and process pipelines, automations, CI/CD that are then used by the devs to write/build apps based on the client requirements.</p>
<h2 id="software-and-software-engineers">Software and Software Engineers</h2>
<p>Now these are really common terms and most people understand the gist, I won&#39;t really go into the depth of everything that a software engineer does.</p>
<p><strong>Software</strong> : Packaged set of digital instructions that run on various platforms 
a.k.a , it&#39;s just an App, the platforms might vary from desktop(PC, Mac), embedded (Chipsets, Microwave, fridge, etc), mobile (Android, iOS) so on. I say <code>packaged</code> since it is a combination of a lot of instructions that are given to the underlying platform and sometimes on a layer that&#39;s talking to the underlying platform. </p>
<p><strong>Software Engineers</strong> : These are the amazing humans that take the responsibility of writing these instructions and often also work on ways to find optimal ways to make those set of instructions make the best use of the hardware.</p>
<p>Software Engineers can be divided into a lot of roles based on a lot of variables, the most common one that you can find almost always is the classification based on the platform the engineer works for. </p>
<p>So examples would be </p>
<ul>
<li>Embedded Systems Software Engineer </li>
<li>iOS Developer </li>
<li>Android Developer </li>
<li>Web Developer </li>
<li>IOT Developer (Sometimes, comes in Embedded development)</li>
</ul>
<p>After this, there&#39;s another variable that makes these role a little more specific, where people start adding details of what they really want. A general start or add-on to the above would be the language that the person works with. </p>
<p>For Example the iOS Developer and Android Developer can be split into</p>
<ul>
<li>iOS Swift Developer </li>
<li>iOS ObjectiveC Developer </li>
<li>Android Java Devloper </li>
<li>Android Kotlin Developer </li>
</ul>
<p>A lot of times the same person might have both languages in his/her skillset but these are specified by the hiring company when the codebase already exists and they are looking for a language specific role, the actual engineer on the other hand  might just mention &quot;iOS Developer&quot; in his resume/profile.</p>
<h3 id="languages">Languages</h3>
<p>As I pointed out language in the previous point. I&#39;ll explain what languages are. </p>
<p>These are basically how the instructions are written for the software to be created.</p>
<p>Developers specialise in these languages and take pride in it. Technical term for this is <code>Programming Languages</code> and Python, Javascript, GoLang, Rust, C, C++, Objective C, Fortran, LISP, Crystal, D lang, are all a few examples, there&#39;s over 300 (maybe more) such programming languages (and still none were built specifically for Desktop UI development...)</p>
<p>Going further we can classify some of these into even smaller parts where we start adding which side of the work do they do, a general  classification would be whether the developer works on &quot;Business Logic&quot; or BLOC , or on User Interface or UI. </p>
<p>A <strong>BLOC</strong> developer works on Server Sided Code, Shared Logical code between various systems and similar things. These are the guys who work and use the algorithms a lot, also called the backend/back-office developer</p>
<p>A <strong>UI Developer</strong> is works on making sure what the user sees is functional and in certain cases uses the shared code developed by the BLOC Dev into the interface to make sure the app follows the requirement generally called the UI Developer or in certain cases Frontend Developer.</p>
<p>In a very ideal case these 2 should be enough to handle or get an App out in the market (this can vary a lot based on a lot of things)</p>
<p>Oh, and examples of these will be of the fashion </p>
<ul>
<li><p>Platform - BLOC(Backend/Back-office) | UI(Frontend) - Framework / Language</p>
</li>
<li><p>Web Developer - Frontend - React / Javascript</p>
</li>
<li><p>Web Developer - Frontend - Angular / Javascript </p>
</li>
<li><p>Web Developer - Frontend - Vue / Javascript</p>
</li>
<li><p>Web Developer - Backend - Express / Node</p>
</li>
<li><p>Web Developer - Backend - Buffalo / Golang</p>
</li>
<li><p>iOS Developer - Frontend - SwiftUI / Swift</p>
</li>
<li><p>iOS Developer - Frontend</p>
</li>
</ul>
<p>Now obviously there&#39;s people who enjoy doing both BLOC and UI and these people are called Full Stack Developers, though a full stack developer is never limited to just those 2 things. More often than not he/she is to have knowledge of how the architecture of the app works and how he can improve it. </p>
<p>While today a Full Stack Dev is limited to a single language and people are proud of that , I remember mentioning in the previous post, don&#39;t limit your skillset! , so if I were to be a full stack dev I&#39;d be learning every language there is and work on projects handling both frontend and backend and understanding architecture for dev.</p>
<p>Since we&#39;re done with the classification part, let&#39;s get to the general roles that are assigned to someone in a company. </p>
<ul>
<li>Junior Dev / The Trainee </li>
<li>Senior Dev / The Guide </li>
<li>Lead Dev / The Mentor </li>
<li>Principal Dev / The Overlord  </li>
<li>CTO / The Elder </li>
</ul>
<p>The name beside the role are just something that I&#39;ve come up with, I&#39;ll try explaining why and what they are. </p>
<h4 id="junior-dev">Junior Dev</h4>
<p>This guy is here to learn, you can have junior devs who&#39;ve been in the industry for over 10 years and prefer having mentors and keep learning (a very good thing to do!) but yeah, these are the trainee, they keeps learning ,These people like having a mentor on top of them almost always, they enjoy the part where they keep learning new things and growing. </p>
<p>A developer should always keep this mentality no matter what role they actually get in a company. I&#39;ve made quite a few attempts to stay at this role but i don&#39;t know , get pushed up always....</p>
<h4 id="senior-dev">Senior Dev</h4>
<p>This guy has made enough fuck ups in his dev life to understand what and where to look for solutions and can guide you on how to approach a problem, again these can be people who just started development and also people that have been doing it for 10+ years, there&#39;s no limit to good you get at a skill, it&#39;s different for everyone. </p>
<h3 id="lead-dev">Lead Dev</h3>
<p>This person&#39;s role is to make sure the other two are able to find resources, docs around well enough and acts as the person who gets rid of the road blocks. His/her work is to manage your work, review your work and 90% of the time acts as an indirect quality check engineer and the person both junior and senior go to when trying to understand the architectural decisions that were made and how the code should/could be structured to perform better , 8/10 this is where the Full Stack Developer ends up being after he&#39;s learned how to handle both people and code fuck ups.</p>
<h3 id="principal-dev">Principal Dev</h3>
<p>He/she are there to be with the development from start to finish, they take care of architecture, development toolchain, dev processes, automations, programming standard / principles  and overlooks and plans stuff.</p>
<p>An interested Developer grows towards this mentality everyday without even knowing but at this point you are the person who researches a lot more than he implements, unless you are in a startup then you might have more than one role anyway but this guy has plans for plans that act as backup for the backup of a backup while being a backup. </p>
<p>Tagged him as <em>The Overlord</em> , because he&#39;s just that, plan everything, has people acting on those plans and doesn&#39;t get into the field unless it&#39;s absolutely necessary.</p>
<p>I&#39;m no where close to a Good Principal Dev yet but we&#39;re getting there.</p>
<h3 id="cto---chief-technology-officer">CTO - Chief Technology Officer</h3>
<p>The Elder, aka <em>the know it all</em> ,  That&#39;s all I&#39;m going to put here, there&#39;s nothing more you can talk about the CTO. </p>
<p>This is one huge post.... </p>
<p>I&#39;ve probably missed a few specifications in terms of roles and thus it&#39;s not to be considered a hard limit on what you can/cannot do and a passionate developer can never be limited to a single role anyway.</p>
<p>You can be a junior working towards becoming a senior, you can be a junior who has moments where you help out a principal developer make decisions, it&#39;s always possible, not everyone knows everything, even if I just said that the CTO is supposed to be the know it all. </p>
<p>That&#39;s it for now, </p>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Sun, 10 Jan 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/06012020-Getting-better-at-development</guid>
      <title>Getting better at development</title>
      <link>https://reaper.im/blog/06012020-Getting-better-at-development</link>
      <description>
        <![CDATA[<p><strong>First</strong>,  as Samuel L Jackson would say, Happy New Year, Mother... !</p>
<p>Now, there&#39;s like a million posts about this topic and they actually share a lot of good information because they are written by developers far more skilled than I am. </p>
<p>Also, I won&#39;t be able to add much more value to any of those but I&#39;m still going to give it a try so, bear with me.</p>
<p>Things that I think are important </p>
<ul>
<li>Algorithms (No shit!)</li>
<li>Understanding of the actual language</li>
<li>Your ability to humble down</li>
<li>Learn by Teaching so you can understand what you actually learned (Sorry, What?)</li>
</ul>
<h2 id="algorithms">Algorithms</h2>
<p>Pretty self-explanatory and probably hyped enough in a world where everyone who wants to join FAANG(Facebook, Apple, Amazon, Netflix, Google) or similar companies, already break their heads on problem solving and algorithm applications. </p>
<p>Which is good, and should be done but not just for FAANG, you should be doing it for your own god damn improvement, you might not want to join any of the above companies but getting better at these will help you solve problems in real life applications quite a bit. </p>
<p>A very simple use case,</p>
<p>You&#39;re building a cab booking app and you create an order and start payment, you&#39;re using something like Braintree or stripe for payment and you&#39;ve already initiated the payment but the user decided that he wanted to cancel the order a second after the payment intent was fired, guess what, you now have a race condition, the payment gateway might win, or the cancel request might win, either way, you now have 2 dependent actions running in parallel and that leads to junk data or complete failure.</p>
<h3 id="the-client-sided-solution">The Client Sided Solution</h3>
<p>The client has the option to not show the cancel button once the payment went through which works and is fine, no big issues but we should&#39;ve thought of a better solution to start with. Though a user kill might create an issue for other dependent processes (rare case scenario, so let&#39;s ignore it for now)</p>
<h3 id="the-better-solution">The Better Solution</h3>
<p>Queues! </p>
<p>Most CS students would already know where I&#39;m going with this but for the self taught humans, 
You add these requests into queues , or basically some implementation of a channeled queue where you can handle the concurrency of certain categories to avoid processing them in parallel aka Redis + rsmq, Apache Kafka, etc etc etc etc! </p>
<p>You have worker instances on the lookout for such requests and complete one request before they complete the other, if a transaction was initialised, wait for it to complete, then cancel it and refund accordingly, this works because even if the client app crashes or is killed by the user your queue isn&#39;t botched and is processed as intended. </p>
<p>I can go in more detail but for now , the point is, you need to realise what problems have already been solved at a base level to find advanced implementations of them to make it easier for you to implement features and these are basically what algorithms are, solutions that already exist in the wild that you just need to understand and implement or use a tool that takes care of the implementation for you.</p>
<h2 id="understanding-the-language-you-use">Understanding the Language you use</h2>
<p>Now, I&#39;m not going to argue over which language is the best, they were all built for specific use cases and have been adapted for various use cases over the years.</p>
<p>The best language is the one you already know , though that doesn&#39;t mean you are going to argue with the internet trying to prove that whatever language you know is the best.</p>
<p>Learn as many programming languages as you can to find the obvious differences that can help you choose which language to go with for certain scenarios, you can find a good overview that <a href="https://drewdevault.com/2019/09/08/Enough-to-decide.html">Drew wrote over at his blog</a></p>
<p>Yes JS is used by SpaceX, because it&#39;s easier and cheaper to find web devs, not because it was an efficient decision but then this statement will fire up all the JS devs around the globe so I&#39;m not going to into the depths of it for now. </p>
<p>To the actual point, <strong>what do I mean by understand the language?</strong></p>
<p>Nah, not the syntax, neither the keywords, what you need to understand is how that language analyses what you instruct it to do. Your syntax is limited to just giving an instruction. 
For eg. </p>
<pre><code class="language-js">  <span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">.</span>one<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>or </p>
<pre><code class="language-go">  type exampleType struct{
    one bool
  }

  func one(obj *exampleType){
    return obj.one
  }
</code></pre>
<p>or </p>
<p>same thing in python, c , I&#39;m not typing each and every snippet, don&#39;t have to show off the number of languages I know.</p>
<p>Back to the explanation, we have snippets that try to access <code>one</code> from an <code>object</code> or a <code>struct</code> and both will fail if <code>obj</code> doesn&#39;t exist, in case of JS undefined can be passed since there&#39;s no type checking and even when go has type-checking you&#39;ll still fail during runtime because the pointer can point to a nil address. Either way, during runtime I have an issue, now this has nothing to do with the syntax , nor is related to something people will tell you to remember, you add this into your set of checks as you keep growing into using the language.</p>
<p> The fixed version of the above is a simple check on the existence of obj, both are short circuited by AND and OR conditions though you can write them in simpler more readable <code>if(obj){}</code> fashion as well.</p>
<pre><code class="language-js">  <span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>one<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
<p>or </p>
<pre><code class="language-go">  type exampleType struct{
    one bool
  }

  func one(obj *exampleType){
    return (obj &amp;&amp; obj.one) || false
  }
</code></pre>
<p>Now, understanding the language can be both proactively done (learn and read about the interpretor and/or compiler while learning the syntax) or reactively done (learn by seeing the code break).</p>
<p>While I&#39;d recommend doing both, where you read about it and then forcefully go ahead and break the code to see and set the error up in your brain (don&#39;t do this in production!)</p>
<p>That&#39;s for understanding the languages. 
Yeah simple examples, we don&#39;t have to go too deep to understand the importance, though if you need more tips , you are free to hit me up on email.</p>
<h2 id="ability-to-humble-down">Ability to Humble Down</h2>
<p>I&#39;m going to shout right now so, one sec. </p>
<p>ITS OKAY TO ASK FOR HELP!</p>
<p>Keep reading the above till you understand it. </p>
<p>As a programmer, you&#39;re always going to jump in on something new, something really old, or something thats irritating before you even get to it. </p>
<p>I&#39;ve tried learning a few languages , been successful in learning a lot of them but then there&#39;s rust, hard time understanding that language, ended up giving up on that language twice and then got back on it again and again till I at least understood the core of the language, I still haven&#39;t written anything useful in that language (then again, I haven&#39;t written anything useful in any language...).</p>
<p>Readers would already know that I&#39;ve been using Go extensively but then, how do I know my code is efficient? who reviews it? </p>
<p>Do I have a mentor? Nope
Do I ask random strangers to review it? Yes.</p>
<p>It&#39;s a simple thing, go to reddit, request a review, someone might be kind enough to actually review your codebase, chances are they might be new as well but now you have things that he/she learnt added to your knowledge drive. Win Win.</p>
<p>If I go, &quot;Nah, I&#39;m way too good at JS , i don&#39;t need anyone to help me learn this new fancy language, I can handle it&quot;, I&#39;m literally pushing away all the free knowledge I could&#39;ve gained. I&#39;m not kidding, a person reviewed my <a href="https://github.com/barelyhuman/commitlog">commitlog</a> codebase that&#39;s written in golang and also wrote about the mistakes I made <a href="https://percybolmer1.medium.com/performing-a-code-review-1297967683f6">you can read it here</a>. </p>
<p>There&#39;s some really simple things that I messed up but then I&#39;m not set with the language&#39;s standards, I wasn&#39;t smart enough to check other existing go repositories read through them and see how things were structured like I did for my JS/TS projects. </p>
<p>In my defence the reason was that it was a POC(Proof of Concept) implementation and was written accordingly, but still I got to learn a lot about how it&#39;s better to structure one package into multiple files instead of how I keep creating package out of every folder I create , which is a habit I have from JS projects. </p>
<p>Long story short, BE HUMBLE! and learn from wherever and whoever you can!</p>
<h2 id="learning-by-teaching">Learning by Teaching</h2>
<p>There&#39;s a great deal of psychological research and articles you can find about why this works , I&#39;m just going to give you a gist of it. </p>
<p>If you&#39;ve learned something and you can teach it to someone else aka explain it well to another person then you&#39;ve successfully learnt and understood that concept.</p>
<p>Basically, the source of the rubber duck debugging method, if you can explain the duck your code, you understand your code and possibly even found the bug while doing that. </p>
<p>If you&#39;re trying to explain it to someone and you are stuck at a certain concept that you can&#39;t explain then guess what, you didn&#39;t understand it, so go back and try again! </p>
<p>That&#39;s about it for now, </p>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Wed, 06 Jan 2021 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/25122020-Updates-December-2020</guid>
      <title>Updates December 2020</title>
      <link>https://reaper.im/blog/25122020-Updates-December-2020</link>
      <description>
        <![CDATA[<p>Ahoy Human! </p>
<p>It&#39;s Chirstmas and I&#39;ve slept for 18 hours now.....</p>
<p>Anyway, </p>
<p>Back to what we are here for, Updates (cause I&#39;m some celebrity with a huge following waiting for me to post this), 
I won&#39;t start with TillWhen this time, people are already bored of it so I&#39;ll add it to the last. </p>
<h2 id="language-updates">Language Updates</h2>
<p>Most people already understand that I&#39;ve been trying to move out of the web dev scene for a while and while I did use Javascript for the desktop apps while hating on electron (hyprocrite much!?) but recently I&#39;ve started using Fyne with Golang to build app and the latest example of this is the <a href="https://github.com/barelyhuman/spotify-lite-go/releases">Spotify Lite App</a> about which you can read <a href="https://reaper.im/blog/10122020-Moving-away-from-web-apps---Story-of-Another-experiment">here</a>.</p>
<ul>
<li>Start Practicing Go Lang more frequently</li>
<li>Attempting to build CLI and Desktop apps in GO</li>
<li>Doing light learning of Rust while I&#39;m at it, because rust is a little harder in terms of getting used too. </li>
<li>JS and TS is still on a decent side though I&#39;ve started properly adding types to my Typescript apps instead of using the <code>any</code> type just because I&#39;m lazy to specify a type definition there.</li>
</ul>
<h2 id="project-updates">Project Updates</h2>
<h3 id="new--still-planning">New / Still Planning</h3>
<h4 id="pfer">Pfer</h4>
<p>Another app that i&#39;ll be building but this is going to be a web app since I need available on all platforms and I don&#39;t have the patience to wait for Apple to approve everything so we&#39;re going with web app for this one. This is a simple playlist sync and transfer app for Spotify Playlists. </p>
<p>I&#39;m not sure about you guys but I have this thing were I add everything from my Saved Library to a Playlist so I can share that playlist around and it&#39;s a good amount of work if you don&#39;t use the desktop app and I wouldn&#39;t want to download 100MB app , login, sync playlist with saved songs, delete app and repeat whenever I want to do this sync. </p>
<p>Pfer is basically going to be a simple web-app for that purpose, there&#39;s not link for you to visit right now, I&#39;m still deciding on how I&#39;ll be making it, I want to build something serverless and drop the whole thing on Vercel&#39;s servers, though the 10 second action timeout might create a block in certain cases and thus I&#39;m still thinking on how I&#39;ll be splitting the actions.</p>
<h3 id="existing-ones">Existing Ones</h3>
<h4 id="spotify-lite">Spotify Lite</h4>
<ul>
<li>Changed auth mode to use PKCE, since the client creds don&#39;t allow refreshing and I totally forgot about it when writing the initial app, it&#39;s fixed on the current release which at the time of writing this is 0.4.0</li>
<li>Added a few helper and loading screens , this was needed since I cannot use the spotify web API&#39;s for playback control, unless the user is a premium user , I probably missed it during reading their reference but my premium ended and the app stopped letting me control the playback so that fixed it for you guys. This is basically why using something you&#39;ve built helps in figuring out issues no one else will.</li>
</ul>
<h4 id="tillwhen">TillWhen</h4>
<p>Here&#39;s our favorite one! So TillWhen&#39;s slack app is being tested by real people on the beta instance right now and you can do that as well, you can sign up on <a href="https://beta.tillwhen.barelyhuman.dev">https://beta.tillwhen.barelyhuman.dev</a> and try out the slack integration from Profile &gt; Integrations &gt; Add to Slack. 
Remember it&#39;s a beta instance, I might clear the database, or i break the god damn server if I wish to when ever I want so don&#39;t use it to save time logs that matter to you. </p>
<p>Oh, and make sure you report those issues on <a href="https://github.com/barelyhuman/tillwhen-issues/issues">https://github.com/barelyhuman/tillwhen-issues/issues</a> , and then I can move onto fixing them.</p>
<p>I&#39;m sad though that no one&#39;s donated yet... I&#39;m kidding, though Its good TillWhen has 140 users right now, which is good considering I only promoted it on ProductHunt and maybe , just maybe on HackerNews and LinkedIn. </p>
<h2 id="sleep-and-work-updates">Sleep and Work Updates</h2>
<p>It&#39;s all going good, the works going great, I&#39;ve improved my sleep cycle quite a bit with the solution I wrote a few posts back, you can find it here](<a href="https://reaper.im/blog/12102020-The-Fight-with-Ones-brain---My-Sleep-Solution">https://reaper.im/blog/12102020-The-Fight-with-Ones-brain---My-Sleep-Solution</a>) , No I&#39;m still not on any social websites though my self hosted Email Server idea didn&#39;t really go well, though I might use SourceHut&#39;s Email Lists , modify it a bit but I&#39;m still not sure about it. </p>
<p>As for repositories, I&#39;ve started mirroring repositories on Gitlab and bitbucket for most repos that I have or care about, bitbucket one&#39;s are still on private though I like the overall interface of bitbucket but the runners on Github and Gitlab are more functional in my opinion so it&#39;s a little hard for me to just jump out of them immediately. </p>
<p>That&#39;s about it for now.</p>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Fri, 25 Dec 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/10122020-Moving-away-from-web-apps---Story-of-Another-experiment</guid>
      <title>Moving away from web apps - Story of Another experiment</title>
      <link>https://reaper.im/blog/10122020-Moving-away-from-web-apps---Story-of-Another-experiment</link>
      <description>
        <![CDATA[<p>The world is moving towards making everything available via the browser and I&#39;m moving the other way where I want to build desktop apps. </p>
<p>I&#39;m not the only one that thinks this way.</p>
<p>Also, it&#39;s always easier to build apps that don&#39;t need a web-server to exist and can handle data and work in and around the system, makes it easier to keep personal data safe and thus less things to worry about for the developer. Again, just my opinion. </p>
<h2 id="yeah-okay-what-experiment-are-we-talking-about">Yeah okay, What experiment are we talking about?</h2>
<p>So I&#39;ve been crying and ranting about electron being heavy, apps being ram hungry, my mac giving up it&#39;s life trying to keep up with all the things I multi-task with, for a really long time now. </p>
<p>On the other hand I did mention about learning rust and go quite a times as well. 
So quick update, haven&#39;t been working on rust much but definitely have tried out a little more in go and this post is basically going to lead to that and why it was the chosen solution. </p>
<h2 id="reaper-and-laziness">Reaper and Laziness</h2>
<p>I&#39;m quite a lazy person and that&#39;s why sitting in one place while typings lines and lines of code everyday is something I enjoy but this laziness can get to your head and then you start using your head more than you use your body. </p>
<p><strong>example</strong>: thinking of every possible way to get the remote from the dining table without moving anything but the hand and the broom stick that was lying on the floor in front of you.</p>
<p>Similar situation lead to the experiment , this time the distance was a full king sized bed with a table on one side and my old phone connected to the charger on the other side. </p>
<p>This is a daily setup, this phone is put on charge after my main device is charged overnight and is responsible for playing my spotify playlists over the day, problem is, to change playlist and or tracks I need to either open it on the laptop or my main device which is again on some corner of the bed because I don&#39;t like distractions when i&#39;m working. </p>
<p>Last option? The open.spotify.com web app, but then this page takes a good 300-400MB worth of ram on Safari and close 290-340MB on chrome with the GPU helper using up to about 50-100MB so yeah, back to 300-400MB of RAM usage which while I could afford if I wasn&#39;t running anything else of the system but in my normal dev workflows there&#39;s a few code editors, a few docker containers, figma for design reference(which takes 1GB because of the amount of designs in that one window) and a few simulators because I do too muhc React Native dev right now for office projects.</p>
<p>In summary, </p>
<p>RAM Available - 8GB( ignoring the paging cache )
RAM Used - 7.1 ( Swap prevents the remaining from being used)
SWAP Used - 1.5-3Gig (based on which emulator/simulator is running)</p>
<p>At that point , opening another webpage that takes up 400MB worth of ram is bascially pushing the macbook at it&#39;s limit which in turn slows down everything else that&#39;s moved to the swap and certain electron apps don&#39;t like working from swap because they weren&#39;t built with that in mind but that&#39;s on the devs and not electron. </p>
<p>So now, I either get up, walk to the other side of the bed and change the tracks or find my main device and change it on that. Either way, it wastes time and i&#39;m too lazy. </p>
<h2 id="spotify-lite">Spotify Lite!</h2>
<p>The name is as original as it can get, that reminds me , I&#39;m to put a disclaimer on the readme for this.</p>
<p>Back to the topic, so what did I build ? A simple GUI interface with 4 buttons and a Text showing the current playing track. </p>
<p>Oh ah, a config screen that you&#39;ll see when you first open the app and it&#39;s available only for Mac right because it was built it 5 hours, how much do you expect from me!? </p>
<p>Anyway, yeah, it&#39;s a mac client for now, but since both the framework and the language used can cross compile, I might get linux and windows releases out soon as well, though I&#39;d first sit and clean up my code, right now its a disaster. </p>
<p>Close to what a 5 year old would scribble all over the house, only he understands the code, same vibe.</p>
<p>The simple principle of building it is already explained above but why build a desktop app over a web app that could&#39;ve done the same thing and I could&#39;ve built it in half the time?</p>
<p>To Learn.</p>
<p>I wanted to learn go and get better at it, I always slow down the moment strict typing comes into the picture and I would like to change that, yes I&#39;ve worked with TypeScript but I just write <code>any</code> and escape from situations where I don&#39;t want to define the types which is bad , both for code and speed so to improve my speed with types involved this is was necessary. </p>
<p>The experience was good, I had a good 5 hours to spare since I woke up early, I did hit some segfaults because of lack of knowledge of channels and go routines but have a better understanding now so it&#39;s all good.</p>
<p>Still most web app oauth flows don&#39;t have PKCE protocol well implemented and need a redirect url which a desktop app can&#39;t really provide so I ended up going with the usual OAuth2 flow but the user has to set it up for himself which I think is fine since It adds to the security. Your client token and secrets are not stored on some external servers but your own device and you can delete the app from your dashboard whenever you want to avoid Spotify lite from using it.</p>
<p>All teasing aside, I&#39;ll link you to the repo.</p>
<p><a href="https://github.com/barelyhuman/spotify-lite-go">https://github.com/barelyhuman/spotify-lite-go</a></p>
<p>That&#39;s all for now, Adios!</p>
]]>
      </description>
      <pubDate>Thu, 10 Dec 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/15112020-Crypto-Nonce-and-Association-Flow---Integrating-Slack-Bot-with-Internal-Services</guid>
      <title>Crypto Nonce and Association Flow - Integrating Slack Bot with Internal Services</title>
      <link>https://reaper.im/blog/15112020-Crypto-Nonce-and-Association-Flow---Integrating-Slack-Bot-with-Internal-Services</link>
      <description>
        <![CDATA[<p>This is base note for the slack bot integration that TillWhen is being built on for reference in future (in case I forget, how I did it)</p>
<p>This is just for the internal testing of the app in my workspace, the official published slack bot will have the oauth flow.</p>
<p><strong>The Base Flow</strong> </p>
<ol>
<li>Slash command send a request with the user_id in the post body that is used to generate a login url with a cypto nonce involved.</li>
<li>The login url redirects to the existing app which sends an app login request if the session doesn&#39;t already exist and also takes care of pairing the slack user id with the app&#39;s user id. If already paired then look at Step 4.</li>
<li>If the user is paired for the first time with the service, a DM is sent to the user confirming the association and also the nonce based login page will show a pairing successful message.</li>
<li>Generate an API Access token for the associated user to be used with the slack bot&#39;s slash commands and use that to identify the session and even block the session if needed.</li>
</ol>
<p><strong>The Changes needed in App</strong></p>
<ol>
<li>Add an <code>integrations</code> table (database) and tab(TillWhen Dashboard)</li>
<li>Add an Integrations Login page to the flow (TillWhen App)</li>
<li>Create API&#39;s for generating integration login , and api access tokens for access handling.</li>
<li>Write an auth check middleware for integrations and assign it to each slash command</li>
<li>Make sure to prioritize expiry token on both API tokens and integration&#39;s crypto nonces.</li>
</ol>
]]>
      </description>
      <pubDate>Sun, 15 Nov 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/15112020-Figma---Design-Tokens---Easing-up-handling-themes-between-apps</guid>
      <title>Figma - Design Tokens - Easing up handling themes between apps.</title>
      <link>https://reaper.im/blog/15112020-Figma---Design-Tokens---Easing-up-handling-themes-between-apps</link>
      <description>
        <![CDATA[<p>As a designer there&#39;s often times where I prototype something and then go ahead and handle the colors in a constants file.</p>
<p>It&#39;s mostly for colors because that gives me access to be able to handle the changes in theme from a single source of truth.</p>
<h2 id="manual-process">Manual Process</h2>
<p>The manual process is pretty common, you create a small block that consists of all the colors and then you just copy the colors out to a simple file which can export the colours. In case of Javascript its a simple JSON file since javascript natively supports handling json. In other languages , like GO I prefer having it written with stricter types and/or enums. </p>
<h2 id="semi-automatic">Semi-Automatic</h2>
<p>The other process is to use a design system library that generates the colours into a usable format for you. You can write a script for using with Illustrator and since I just started using Figma there&#39;s a few plugins that figma&#39;s community has built that makes it a little more easier. </p>
<p>The official term of this is a &quot;Style Dictionary&quot; and the most followed standard is the Amazon&#39;s Style Dictionary. I don&#39;t really want to go in depth of how style dictionaries work and what they are, there&#39;s better posts about it on the web. </p>
<p>We&#39;ll just setup Figma so it can export the styles we define as a style dictionary to be used with various services. I&#39;m focusing on React Native and Web frameworks for this so the JSON output works fine. Other languages can use a JSON decoder to get it in the language&#39;s native map/hashmap/dictionary format.</p>
<h3 id="figma-and-design-tokens">Figma and Design Tokens</h3>
<p>People who&#39;ve been using figma for while might already know about this plugin but this is coming from a person who just started moving towards using Figma for interface design and I came across this plugin a fews weeks back but couldn&#39;t recommend it till I was done with my own set of tests.</p>
<p>The plugin is <strong>still in dev</strong> so both the creator and I&#39;d like you to keep that in mind while using the plugin.</p>
<p><a href="https://github.com/lukasoppermann/design-tokens">Design Tokens</a> is a simple plugin that you can add to your figma workflow that will allow you to export all your style definitions to a json file.</p>
<p>We&#39;ll start small, let&#39;s say I setup 2 styles in my Figma File, </p>
<ol>
<li>for the color #121212 as Black </li>
<li>one for the basic font Roboto as Font-Normal</li>
</ol>
<p>Once installed I can just right click on the file &gt; Plugins &gt; Design Tokens &gt; Export to JSON and you will be prompted to download a JSON file with the following content</p>
<pre><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"black"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"category"</span><span class="token operator">:</span> <span class="token string">"fill"</span><span class="token punctuation">,</span>
    <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"rgba(18, 18, 18, 1)"</span><span class="token punctuation">,</span>
    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"color"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"font-normal"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"fontSize"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>
      <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"pixel"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"textDecoration"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"fontFamily"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"Roboto"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"Regular"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"letterSpacing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>
      <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"percent"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"lineHeight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span><span class="token punctuation">,</span>
      <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"auto"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"paragraphIndent"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>
      <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"pixel"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"paragraphSpacing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"number"</span><span class="token punctuation">,</span>
      <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"pixel"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"textCase"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">"value"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"string"</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As you can see, that&#39;s basically every property that you could&#39;ve edited per style. </p>
<h3 id="simplifying-the-copy-paste-of-json">Simplifying the Copy Paste of JSON</h3>
<p>The plugin also allows you to setup a GitHub repository or a server where the updated tokens can be sent and this makes it a painless process for both the design and dev process, if the designer decided to change the theme, he can do so in the figma styles and just export it to the url you&#39;ve provided in the settings. </p>
<p>This can point to an existing code repo or a separate design repository that is being used as a submodule and you don&#39;t have to manually check if the theme works since the standard is to be followed.</p>
<p>I&#39;ll write about more plugins and more design to dev process simplification as I get more and more tools involved in my design process. </p>
<p>Till then, Adios!</p>
]]>
      </description>
      <pubDate>Sun, 15 Nov 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/1112020-Update-October---2020</guid>
      <title>Update October - 2020</title>
      <link>https://reaper.im/blog/1112020-Update-October---2020</link>
      <description>
        <![CDATA[<p>Yeah, I haven&#39;t posted in quite sometime and really don&#39;t have anything that I&#39;d like you to know from me at this point but this update is just a chore.</p>
<p>We&#39;ll be going over things regarding </p>
<ul>
<li>TillWhen - Time Tracker</li>
<li>Pending  - Kanban Board / To be Project Tracker</li>
<li>A bit about what&#39;s up with me </li>
</ul>
<h3 id="tillwhen">TillWhen</h3>
<p>First Time reader? TillWhen is a time tracker that was built as an alternative to the pricey time trackers out there and would like to be simple unless someone requests for some crazy cool feature which I&#39;m not sure if I&#39;ll build or not but for now, it&#39;s simple.</p>
<p>Whats the Update?
It now has a beta version of Tasks added to it, so you don&#39;t have to use another tool to manage your tasks based on Projects and it&#39;s <strong>Beta</strong> because I still haven&#39;t added project based filters and a per task time logger.</p>
<h4 id="project-based-filters">Project Based Filters</h4>
<p>Simple filters that&#39;ll help you segregate between tasks for specific projects, pretty simple feature but I haven&#39;t pushed it into the live version yet.</p>
<h4 id="per-task-time-logger">Per Task Time Logger</h4>
<p>So, there&#39;s a dilemma for this feature, should I add them as time trackers per task or should I just redirect the user to the time logger and then follow the normal flow. The per task one will allow users to have multiple tasks being run simultaneously which would be nice , since I never actually am doing just one task at a time but then the amount of timers running on the page can slow down on certain older browsers and I wouldn&#39;t wanna do that so this feature is still under consideration.</p>
<p>There&#39;s no roadmap to TillWhen but a much awaited feature would be a <strong>bot</strong> for the tillwhen that you could integrate into <strong>slack</strong> and <strong>telegram</strong> and that&#39;s something I plan on doing soon. The Telegram version is under tests and was quite easy to go about,I haven&#39;t built a slack bot before so will have to go through that soon.</p>
<h3 id="pending">Pending</h3>
<p>I doubt that anyone knows about the existence of <a href="https://pending.reaper.im">Pending</a> mainly because I never really talked about it but it&#39;s a simple Kanban board at this point. The reason it&#39;s in this update is that Pending will be getting a overhaul soon. </p>
<p>It was meant to be a browser based storage but getting the peer to peer data sharing was something that would create friction for normal users and that&#39;s something I didn&#39;t want. I mean having people store their project data offline and on their system is fine but it normally involves a team and thus the requirement of a distributed/central server. I wanted to go the distributed route but I&#39;ll start with a central arch because It&#39;ll be easier to start with.</p>
<p><strong>TLDR;</strong></p>
<p>Pending is going to turn into a basecamp like central project board instead of being just a browser storage kanban board.</p>
<h3 id="whats-up-with-you">What&#39;s Up with You?</h3>
<p>Not much actually, got better at Go, going through the documentation of <a href="https://gioui.org/">Gio</a> to be able to build decent GUI apps with Go and then maybe build something small to test the waters. </p>
<p>Also, planning to move towards building system level tooling and get into kernels and build tools so I can leave Web Development to be just a part of the skillset and not the whole skillset. Kinda tired of frontend development for a now, really into CLI tools and that&#39;s probably because I use the terminal more than I use the GUI apps. </p>
<p>Experimenting with moving the <a href="music.reaper.im">Music</a> to be have a cli version so I don&#39;t have to open the browser , because the browsers take a lot more RAM than needed. </p>
<p>A few apps that I switched to, to save some RAM.</p>
<ul>
<li>Chrome to Safari (increased battery life...)</li>
<li>VS Code to Sublime (People use Vim without any plugins, it&#39;s not that hard to change back to something as fast as sublime)</li>
<li>Source Tree / Sublime Merge - I use them alternatively, normally have source tree open but sometimes I use sublime merge for bigger files. This was added to arsenal because I got rid of VS Code. Both Apps Combined don&#39;t use as much RAM. </li>
<li>Hyper to iTerm </li>
<li>Postico from Table Plus (not much of a memory usage difference but I just don&#39;t like the bothering pop up from Table Plus every time I try to open a new Tab, replace the existing tab instead of bugging the user?)</li>
</ul>
<p>The search for good cross platform GUI has ended, Gio as I mentioned above but since I&#39;m still learning, it&#39;ll take time to get used too. Another good option is <a href="https://vlang.io/">V Lang</a> that comes with a ui package that is still in alpha phase but is decent for GUI apps. The language itself is pretty easy to learn but I&#39;m going to wait for the package to mature a bit more. For people who don&#39;t want to learn a new language then your options include <code>libui</code> bindings for your specific language, it&#39;s pretty limited in terms of usable widgets but can get the job done.</p>
<p>That&#39;s about it from me</p>
<p>Adios! </p>
]]>
      </description>
      <pubDate>Sun, 01 Nov 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/12102020-The-Fight-with-Ones-brain---My-Sleep-Solution</guid>
      <title>The Fight with One's brain - My Solution to Sleep</title>
      <link>https://reaper.im/blog/12102020-The-Fight-with-Ones-brain---My-Sleep-Solution</link>
      <description>
        <![CDATA[<p>I&#39;ve had problems sleeping for as long as I can remember and this has made it hard for me to keep my brain functioning properly and getting me addicted to solutions like Hot Chocolate with Caffeine and/or Coffee to keep me up for as long as needed for work. </p>
<p>While this was getting me through the day with enough productivity, there&#39;s always times where I wish I could just fall asleep but then I have a startup job that needs me to be there for a decent number of hours before I can give myself the permission to fall on the bed.</p>
<p>That said, the past few months during the lockdown made it worse. You see, when I had to go to the office there was a perfect schedule that I had to follow and I&#39;d be tired by the travelling so I&#39;d normally fall asleep somehow by 2 - 3 AM but since there&#39;s no such physical effort required and I literally just roll over my bed to reach my workstation it&#39;s hardly any tiring even after 8-10 hours of continuous work. </p>
<h3 id="internet-solutions">Internet Solutions</h3>
<p>The solutions I see all over the place are the likes of </p>
<ul>
<li>Get away from your devices 30-40 mins before bed time </li>
<li>Listen to white noise or rain sounds </li>
<li>Drop the room&#39;s temperature to something that you find comfortable (generally about 18 C )</li>
<li>Drink some kind of sleep inducing herb tea or something </li>
<li>And the final recommendation Melatonin Drug (Please consult a doctor first!)</li>
</ul>
<p>While they all do work in one way or the other because to sleep you gotta get comfortable, your body needs to feel like it needs rest but the devices , white noise aren&#39;t something that helped me. Might work for you, but didn&#39;t work for me. I ended up trying things I used to do as a kid when I couldn&#39;t sleep. </p>
<h3 id="my-attempted-solutions">My Attempted Solutions</h3>
<p>These are things I tried that worked sometimes but not every time.</p>
<ul>
<li>Arms Straight, head straight, look at the god damn fan till you fall asleep</li>
<li>Work out a bit just before I went to sleep</li>
</ul>
<p>I haven&#39;t recorded the events of the day so can&#39;t really confirm why and when they work.</p>
<h3 id="the-one">The One</h3>
<p>Now this, probably the most simplest and obvious thing for most of you but with a head like mine where you are constantly bombarded with memories, issues, possible bug fixes and project ideas, regrets and theoretical analysis and their results. It&#39;s kinda hard (no i&#39;m no smarty pants, I just think a lot). </p>
<p>I applied something I do for getting rid of or getting into a habit, <strong>conscious control</strong>. </p>
<p>Let me explain.</p>
<p>When trying to learn something or trying to get rid of a habit you have to consciously tell yourself that you are to avoid or do this thing. If i&#39;m learning a new language, I&#39;m to force myself to talk in that language. If learning a programming langugage, same applies, force myself to build something with it. </p>
<p>Though, you can&#39;t force yourself to sleep but the point of all the tips mentioned is to get yourself physically <strong>and</strong> mentally comfortable and calm. Yeah, I know, meditation is the best solution for that <strong>but</strong>, It doesn&#39;t always work for everyone. </p>
<p>For certain people getting rid of the thoughts needs you to go through them, for some people it&#39;s just focusing on their breath, for some it&#39;s forgetting the present and living in the white noise and while you can call it meditation cause I still follow the base principle of redirecting the focus to something else it&#39;s a little different than your conventional meditation.</p>
<p>The trick is to shift focus to a blank or shift your thoughts to plain nothingness, not my breath, not the story a meditation guru is narrating, nor trying to listen to  white noise. <strong>Just blank out!</strong></p>
<h3 id="how-though">How though?</h3>
<p>I don&#39;t know... I don&#39;t even think I can explain it properly but I&#39;ll give it a try. </p>
<p>Let&#39;s say I&#39;m thinking about a project, the features I&#39;d like, the issues it&#39;ll bring, the things that can go totally wrong, the amount of time it&#39;d take for me to perfect it the amount of research I have to do, and you can see the fall towards the <em>negative</em>, normally at this point you go towards a, &quot;<em>Forget it</em>&quot; and try imagining a blank black view, there&#39;s nothing there, no project, no humans, no positive, no negative nothing and apparently this relaxes your body automatically. </p>
<p>There&#39;s no tension in the shoulder, the legs stop shaking, my fingers stops typing in the air (Yes, I do this) but not on the first go obviously.</p>
<p>My brain is notorious enough to take me back to something else, like how I fell off the stairs while trying to impress a girl or how I botched a deployment and almost broke the entire code flow, it&#39;s all there in my memory and it keeps coming back and I guess it happens to the most of us considering the amount of memes this topic has. All I have to do is repeat the process, go back to blank. </p>
<p>The amount of time you have to stay in the blank depends on how the day went, too much on your mind? Will take a little longer than 10-15 mins. Tiring day? You might just fall asleep on the first transition. It really differs, even for me but it&#39;s better than not sleeping at all, or sleeping at 6 and waking up at 9 to start working again.</p>
<p>Adios.</p>
]]>
      </description>
      <pubDate>Mon, 12 Oct 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/30092020-Postgres-ECONNREFUSED-on-127.0.0.1</guid>
      <title>Postgres ECONNREFUSED on 127.0.0.1</title>
      <link>https://reaper.im/blog/30092020-Postgres-ECONNREFUSED-on-127.0.0.1</link>
      <description>
        <![CDATA[<p>Postgres fails to start properly if there&#39;s an obsolete postmaster running and services fail to connect to it so just remove the pid <strong>if it exists</strong> to make the service create a new process.</p>
<pre><code class="language-sh">rm -f /usr/local/var/postgres/postmaster.pid
</code></pre>
]]>
      </description>
      <pubDate>Wed, 30 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/27092020-Updates-27th-September</guid>
      <title>Updates - 27th September</title>
      <link>https://reaper.im/blog/27092020-Updates-27th-September</link>
      <description>
        <![CDATA[<p>Let&#39;s look at things I&#39;ve done in the past few weeks.</p>
<h3 id="tillwhen">TillWhen</h3>
<ul>
<li>To-dos now in beta </li>
<li>Export Project data to CSV</li>
</ul>
<p>Added the above two to Tillwhen and are right now on the beta environment as I&#39;m posting this, you can expect them to be on the live instance in about 2 days.</p>
<h3 id="cor">Cor</h3>
<p>Haven&#39;t touched Cor for a while now , Cor is a project management app that I planned on building but gave up mid way, might get back into building it soon, but not motivated enough to work on it right now. </p>
<h3 id="pui">PUI</h3>
<p>A postgres UI client that was built as a toy project will take precedence over COR and TillWhen next week. It&#39;s usable for local connections for now but basically has no validations etc so wouldn&#39;t really recommend using it for cloud connections right now, plus I haven&#39;t added ssl support to it so that&#39;s going to fail on you for various hosted instances anyway.</p>
<h3 id="others">Others</h3>
<p>I&#39;ve been working on the text editor research still and have been practicing Go Lang and C a little more and plan to get better at both before I start using them in production grade stuff. The Minimal Code Editor that I&#39;ve been planning to build all along is the motivation for me to go to these languages. C for it&#39;s cross-platform availability and Go for it&#39;s easy interop with Swift and GTK. While the Linux edition of the editor might come off easy with just one language, the mac version takes precendence since I&#39;ll be testing the editor while using it myself.</p>
<p>Also plan on building a transaction tracker and payment system for people to host , something like Drew&#39;s <a href="https://github.com/ddevault/fosspay">fosspay</a> but my take on it. Not sure when I&#39;ll be starting this but you can follow my Github to see if I do it.</p>
<p>Setup a personal git server for TillWhen&#39;s source code, not that I worry it&#39;s source code will be out because I will be making it open source once the app is stable with all the features I want and once I&#39;ve removed all the heavy UI libraries it has as dependencies for smaller components. Don&#39;t want the community to start patching torn  elements of a codebase that&#39;s not elegant to deal with so stay tuned for that.  </p>
]]>
      </description>
      <pubDate>Sun, 27 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/24092020-Setting-up-a-personal-git-server</guid>
      <title>Setting up a personal git server</title>
      <link>https://reaper.im/blog/24092020-Setting-up-a-personal-git-server</link>
      <description>
        <![CDATA[<p>This post is not a blog write up and just consists of steps I went through to setup a git server on my home server ( Raspberry Pi, for now).</p>
<p>File content is available below.</p>
<ol>
<li>Setup WIFI - Make sure it auto connects. (Default: Debian CLI Wifi)</li>
<li>Install NGINX,FastCGI and Setup gitweb config in <code>/etc/gitweb.conf</code></li>
<li>Setup the default nginx to point to the gitweb config and <code>gitweb.cgi</code></li>
<li>Setup Git Daemon to point to the <code>projects</code> directory and <code>--enable=receive-pack</code> as the additional parameter.</li>
<li>Restart services, nginx, fastcgi, git daemon.</li>
</ol>
<p>Files.</p>
<p>etc/gitweb.conf</p>
<pre><code class="language-sh">our $projectroot = &quot;/home/pi/git-repos&quot;;
our @git_base_url_list = qw(git://192.168.31.162 pi@192.168.31.162:git-repos);
</code></pre>
<p>add this to the server listener in nginx </p>
<pre><code class="language-sh"> location /gitweb.cgi {
           include fastcgi_params;
           gzip off;
           fastcgi_param   SCRIPT_FILENAME  /usr/share/gitweb/gitweb.cgi;
           fastcgi_param   GITWEB_CONFIG  /etc/gitweb.conf;
           fastcgi_pass    unix:/var/run/fcgiwrap.socket;
        }

        location / {
          root /usr/share/gitweb;
          index gitweb.cgi;
        }
</code></pre>
<p>Commands to create a repository. </p>
<pre><code>git init --bare --shared &lt;project-name&gt;
cd &lt;project-name&gt;
touch git-daemon-export-ok
cp hooks/ppost-update.sample hooks/post-update
chomod a+x hooks/post-update
echo &quot;Project Description&quot; &gt; description
</code></pre>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Thu, 24 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/20-09-2020-Building-stuff-you-dont-like</guid>
      <title>Building stuff you don't like</title>
      <link>https://reaper.im/blog/20-09-2020-Building-stuff-you-dont-like</link>
      <description>
        <![CDATA[<p>I&#39;ve advocated working on projects that you&#39;d like to learn to build and also projects that you think you&#39;ll use, in the past but then there&#39;s another category of projects that exist. The ones we don&#39;t like. Now, it should pretty obvious that this category is pretty dense. </p>
<p>This can have projects that you don&#39;t like at all and also projects that you think you&#39;ll like to do but then end up deciding otherwise because you either lost confidence in the project or to be precise hit with the realisation that there&#39;s a similar project that&#39;s built a lot better than you ever can.</p>
<p>This is quite common with me and let&#39;s see the solutions I&#39;ve discovered.</p>
<p>Let&#39;s start with projects you don&#39;t like at all. I&#39;d say just put them in a project bucket list and don&#39;t touch them for now, we might approach these when we think we are out of ideas to build something. </p>
<p>Now to the projects that we started but then left them half baked. </p>
<p>I can always bring in TillWhen as an example here but I won&#39;t this time. I will link you to it though. <a href="https://tillwhen.barelyhuman.dev">TillWhen - Just a Time Tracker</a></p>
<p>So let&#39;s see, how can I explain this without sounding like a jerk, which is very hard to do.</p>
<p>It&#39;s okay to drop projects in the middle and the main culprit most of the times is the amount of effort you have to put into the project. At least after my research on how <strong>I drop projects</strong>, the general process I follow when dealing with an idea is to note it down somewhere with the set of MVP Features that I&#39;d need.</p>
<p>The next step is to start the project and decide the stack for it, and this part takes a good amount of time because now I have 2 options, use something new to learn it and then use something that&#39;s been setup properly already and use that instead. </p>
<p>After deciding the above, I end up either creating a project or dumping a project based on two factors.</p>
<ul>
<li>Nature of the Project </li>
<li>Time of acceptance</li>
</ul>
<h2 id="nature-of-project">Nature of Project</h2>
<p>Now this is very simple, if the project is more for experimenting, then the new stack, new arch approach works really well and I learn a few things but most commonly end up dropping the project when the new stack creates more problems than required. It&#39;s not that the stack can&#39;t handle the issue , its the amount of work I&#39;d have to put to fix something small that I could&#39;ve solved with a stack I&#39;m used to.</p>
<p>If I take up a project that&#39;s supposed to be a proper product and be released then using a new stack and experimenting with it will be a bad idea because I know I&#39;ll loose interest because of the above point.</p>
<p>On the other hand, if you want to try building a small addition then don&#39;t start from scratch and try adding that addition to an existing product to see how it works out and do it on a different branch of your git or version control workflow , so you don&#39;t have to commit to the new experimental addition.</p>
<h2 id="time-of-acceptance">Time of Acceptance</h2>
<p>I&#39;m the kind of guy who likes to work on projects that put up a challenge, a simple CRUD app to manage team projects is not a challenge at all but I ended up trying to build one and have been forcefully pushing myself to build it. </p>
<p>This whole post is a way to just remind me that it&#39;s okay to drop the project. But, I also have to realise that not all projects that are out there can be left this way.</p>
<p>I should focus on extending existing projects and maybe even work on integrating different projects with each other. This is where Time of acceptance comes into play. This differs from project to project but there&#39;s a general average you can find out. Mine is 3 days. If I can&#39;t build an MVP in 3 days you can forget that project. There&#39;s no way I&#39;m going to work on it for more than that unless it&#39;s a challenging issue and I&#39;d like to break my head longer.</p>
<p>Simply put, Time of Acceptance is basically the amount of time people take to accept that this project is not worth it anymore, and this can be a subconscious decision and this might take longer for the conscious to realise.</p>
<h2 id="avoiding-half-baked-projects">Avoiding Half Baked Projects</h2>
<p>It&#39;s good to try new stacks, new arch, building new arch and also trying out new languages but when you are forced to build a minor part of a production project into a new stack it can be quite daunting and push you away from it, so as I mentioned in a few posts back, have a default stack that you fall to for building production apps and only try new stacks on something small that you&#39;ve already built so you know the parts that need attention and then you can look at how that language would handle that issue or how the new stack makes it harder or easier for you to approach it.</p>
<p>If I would&#39;ve done the project management app in an existing setup stack with login, tab, and other architecture and cosmetics figured out, I would&#39;ve built it in a few hours but since I&#39;ve been slacking off the whole thing on trying out new languages , trying out new database schema designing techniques , the project is just a huge experiment.</p>
<p>And that&#39;s mainly because It wasn&#39;t started with the honest mentality to actually be a product for the people, it started as an experiment and is going to be left out to be one.</p>
<p>The only way to avoid this from happening is to avoid the effort you put into building it. Use generators, use project templates and/or tools that already do something you are trying to do. Like, can a telegram bot achieve this, can I use an existing program and just integrate with it to make it easier. </p>
<p>Like if building JARVIS is something you&#39;d like to do then start with an existing NLP engine and use that instead of going crazy like me and attempting to build an NLP engine from scratch. While the latter would help you learn about processing text efficiently and data structures to help you work with huge amounts of existing buffers of data to figure out what the entered text meant but then that&#39;s about it. You could&#39;ve just read about it for future references but no, you decided to build it again because using Facebook&#39;s Wit.AI wasn&#39;t a good option back then.</p>
<p>Most products you see from huge companies are built well because there was a team who was paid to dedicatedly work on it and you have the option to jump from project to project and that&#39;ll always get in the way unless you have a razor sharp focus, which I don&#39;t.</p>
<p>Also, the solutions provided above are all with respect to people who work as solo developers and are building things because they think it&#39;s fun and don&#39;t really expect a return from it.</p>
<p>Proof of this? TillWhen</p>
<p>The donation button there is just a small add-on that I don&#39;t even expect people to use. It&#39;s there on the website as a formality. </p>
<p>The UX was so intentionally decided that I put the page outside the actual app environment, you can&#39;t see it till you actually logout. I didn&#39;t really want people to pay for something like a time tracker and just added that so if there&#39;s someone who&#39;d like to help the developer, they could.</p>
<p>I do update TillWhen and add improvements for performance and stuff but that&#39;s because I can see TillWhen growing, not at a very high pace but it&#39;s cool and that acts as a return for me.</p>
<p>On the whole, your side projects can turn into disasters and it&#39;s okay. </p>
<p>You can end up not wanting to complete them and that&#39;s okay too.</p>
<p>To solve it though, use smart arch decisions to reduce your <strong>initial</strong> work for the prototype.</p>
<p>Don&#39;t try building everything from scratch for something that you might not even work on from a few days from now. </p>
<p>but! </p>
<p>This doesn&#39;t mean you will not try out new languages, tech stacks, etc. Have dedicated projects that you&#39;d build with during the learning process so it doesn&#39;t effect a potentially good project that you could&#39;ve built.</p>
<h4 id="examples-of-this">Examples of this?</h4>
<p>A music player, a todo app,  a god damn random colour hex generator if you want.</p>
<p>Now these projects are small enough to be built in a few days or maybe even hours but the point is they are easy and that gives you time to learn something new and/or experiment with.</p>
<p>I needed to figure out ways to handle ACLs better and I created a whole project for it when I could&#39;ve just tested it on an older project on a dummy branch and this stupid decision to build the whole base arch contributes to this post just as much as the project management app that I talked about in the first few paragraphs.</p>
<p>That&#39;s it for this one</p>
<p>Adios.</p>
]]>
      </description>
      <pubDate>Sun, 20 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/09092020-Deciding-on-Web-Technologies</guid>
      <title>Deciding on Technologies</title>
      <link>https://reaper.im/blog/09092020-Deciding-on-Web-Technologies</link>
      <description>
        <![CDATA[<p><strong>NOTE: This post won&#39;t give you options to choose from but instead teaches you how to</strong></p>
<p>In an ideal world, there&#39;d be one set standard that we could follow for building apps but then there&#39;s no such thing as an ideal world in the first place. In an era where a new frontend framework arises every few days and if you monitor github like I do, you can see one pop up every few hours. </p>
<p>So then, how do you decide on what to use and what not to use?</p>
<h3 id="the-comfortable-one">The Comfortable one</h3>
<p>No bullshitry here, the best answer is to go with the one you are already comfortable with. If I were to instantly select a framework to build a frontend app, I&#39;d choose nextjs without giving it a second thought. I&#39;d obviously have to make hacky changes later in the development phase to patch up stuff that doesn&#39;t directly work well with the library/framework but most of the times you can just go with this option.</p>
<p>I&#39;d say you stop reading here if you already have a framework, library in your mind at this point. The remaining of the post focuses on understanding requirements and choosing the <strong>next comfortable one</strong>.</p>
<p>You can use jQuery with .Net or PHP without laravel for all I care as long as you can get the work done without snatching your hair.</p>
<h3 id="but">But!</h3>
<p>Theres always a time were something is obsolete because the community says so or the maintainers gave up. I&#39;d know, because I gave up jQuery for React because someone told me, then I got into RiotJS because I thought it was interesting and then we came to VueJs because Angular 1 was a decent framework and vue inherits a lot of the templating aspects from it but then Angular 2+ ... let&#39;s not talk about this. The same goes for backend options, I&#39;ve shifted from python flask to Django to Node + Express to Loopback to now, shameless plug <a href="https://github.com/barelyhuman/ftrouter">ftrouter</a>. I was comfortable with Loopback 3 but then EOL and now I have my own because I went crazy.</p>
<h3 id="how-do-you-decide-then-">How do you decide then ?</h3>
<p>There&#39;s 3 major factors </p>
<ul>
<li><p><a href="#nature-of-the-project">Nature of the Project</a></p>
</li>
<li><p><a href="#requirements">Requirements</a></p>
</li>
<li><p><a href="#team">Team</a></p>
</li>
</ul>
<h4 id="nature-of-the-project">Nature of the Project</h4>
<p>If this is a production project, I&#39;d ask you to shift to <a href="#requirements">Requirements</a> as that dictates the choice in this case. If it&#39;s a personal project and something you want to toy around with, you can literally pick up any new tech that you think you want to try or looks interesting and go ahead with it and the other points might not even make much of a difference.</p>
<h4 id="requirements">Requirements</h4>
<p>Let&#39;s get on how these would change my decision. </p>
<p><em>We need a portable binary that has both frontend and server running from it.</em></p>
<p>With that as a requirement, my obvious goto would be Go Lang with or without any frontend framework but, what if this requirement comes in after you&#39;ve started building the base with node and react, and you&#39;ve only build the node side and the react part hasn&#39;t started? I&#39;d switch to Vue or Svelte , because the output spa html is smaller and that reduces my overall binary size which is always good.</p>
<p><em>We need it built in the next 4 days for a prototype</em> </p>
<p>And now we&#39;d use something like Angular because it&#39;s easy to find resources only from where you can copy paste templates and setup stuff pretty quickly and then it&#39;s easy to scale on it as well so that&#39;s that. </p>
<p>Point being, your requirement and output dictates what you want. If I had a absurd requirement  like </p>
<p><em>It should be crazy fast! like I don&#39;t care the time you take but it should be epic fast</em> </p>
<p>At this point, we all know webassembly for computation and maybe even rendering (if I have the time) would be a good selection or you can go old school and use server&#39;s to render plain html and use form actions for http requests and validations. AdonisJS, ROR, Django, etc etc etc are the easier ways to get this done or maybe a custom GO server responding with html with some templating library. Point is, it depends.</p>
<h4 id="team">Team</h4>
<p>While the requirements dictate a good percentage of the selection, if you are working alone, the above section should be enough but then when teams are involved you gotta consider how well the team already knows the selected tech. If you suddenly decide that the whole team is going to work in Go Lang or Rust just because it&#39;s the new cool thing, you&#39;ll be hindering the speed of development and maybe even developer motivation because you still have a deadline the devs need to hit.</p>
<p>Choose something that the team already knows and grow with it, you could change things like use Koa instead of Express for better async await support but don&#39;t just decide to change the language without actually consulting the team</p>
<p>Still. There&#39;s always cases where you have to make the shift because the needed requirement isn&#39;t available in the current tech stack. For example, there&#39;s no authorised stripe library in flutter but a slightly more dependable one in react native so I go with React Native on this one.</p>
<p>In such cases, take in consideration how much of a shift it&#39;s for everyone. You can adapt to the new structure and go with it no issues, but can everyone? Take that into consideration and then make the decision to move. If the learning curve is just too high then maybe change the deadlines or you&#39;ll end up with some frustrated devs.</p>
<p>To all developer reading this, there&#39;s no harm in learning more languages, programming languages are a skillset and you shouldn&#39;t be scared to learn a new language. It opens a lot of doors. Have one primary language that you try to master but have others on the side for cases where that knowledge can come in handy. Knowledge of haskell and elm have helped me make app a little more bulletproof and code better abstracted while being composable.</p>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Wed, 09 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/07-09-2020-Simple-Design-Tips-for-Developers</guid>
      <title>Simple Design Tips for Developers</title>
      <link>https://reaper.im/blog/07-09-2020-Simple-Design-Tips-for-Developers</link>
      <description>
        <![CDATA[<p>I&#39;ve got a very small list of hobbies, namely reading, writing, coding, gaming and designing. Coding being my <em>ikigai</em> (Japanese concept that means &quot;a reason for being&quot;). Designing on the other hand was something I did to make cool monograms for myself but during the learning phase of designing I did learn a few things, I think as a developer you can accommodate these tips pretty easily without having a lot of design knowledge.</p>
<p>There&#39;s been numerous posts about this already and probably better ones but let&#39;s give it a try, shall we?</p>
<p><em>The post uses <a href="https://reaper.im">https://reaper.im</a> and <a href="https://tillwhen.barelyhuman.dev">https://tillwhen.barelyhuman.dev</a> as references for a lot of things and that&#39;s because the points I mention are implemented on both. Even though TillWhen still has some UI inconsistencies, considering it has other UI Kit&#39;s involved and I can&#39;t just throw them out without actually getting the functionalities done first.</em></p>
<p>There&#39;s basically 3 concepts I want to cover here</p>
<ul>
<li><a href="#spacing">Spacing</a></li>
<li><a href="#typography">Typography</a></li>
<li><a href="#layout-and-alignment">Layout and Alignment</a></li>
</ul>
<h2 id="spacing">Spacing</h2>
<p>If we go through <a href="https://reaper.im">https://reaper.im</a> for a brief second you can see everything follows a consistent spacing standard and this is what I call <em>spacing harmony</em> , it&#39;s not a new concept but something very simple that people forget.</p>
<p><img src="/assets/buttons.png" alt=""/></p>
<p>If you observe, we have the same amount of vertical and horizontal spacing in the 2 lines of buttons. Now this is not the only place where this is being used. Point being though, having a base spacing amount and using it&#39;s multiples to decide the spacing works wonders.</p>
<p><code>8px</code> is my magic number for spacing and its multiples are used around the website. Some people start of with <code>4px</code> since it works well in mobile devices but I&#39;d recomment you use device specific spacing measurements when working with mobile screens to avoid making the spacing too small on hidpi devices.</p>
<h3 id="why-is-it-important-">Why is it important ?</h3>
<p>Spacing and Typography create a sense of hierarchy between elements and while Typography tells you what you should read first, spacing tells you what items are together and what items are not. This gives you a general idea of the relationship between elements is.</p>
<p><img src="/assets/tillwhen-dashboard.png" alt=""/></p>
<p>A good example would be the spaces that split the Navbar from the page title and then page title and subtitle having minimal gap to show that they are grouped and then a massive gap between that and the data cards, making clear separation between elements that are together, and elements that are subsets.</p>
<h2 id="typography">Typography</h2>
<p>I&#39;ve already mentioned what role Typography plays in designing and if you get good with typography and spacing, you don&#39;t really need a lot of design knowledge to get a good looking design up and ready.</p>
<p>I&#39;m in no sense a master of this but have been experimenting with it for a while now and you are reading on a blog that&#39;s been testing this very approach.</p>
<p><img src="/assets/reaper-visual-hierarchy.png" alt=""/></p>
<p>Let me guess you saw the logo first, the name next and the contact button next and the subtitle last ? If that&#39;s the order you had then I was successful in maintaining a good <strong>Visual Hierarchy</strong>. If not, then ....</p>
<p>Getting a control of what the user reads and the way he flows through your content makes it easier for you to decide what you want them to do.</p>
<p>This is equally helpful in Apps as it&#39;s on blogs.</p>
<h2 id="layout-and-alignment">Layout and Alignment</h2>
<p>This is probably the only tip that almost all frontend developers already know. The thing about Layouts is that one layout never works for everyone and everything.</p>
<p>But, a general rule of thumb is to make sure everything lines up perfectly. (Thanks, captain obvious.)</p>
<p>Though, it doesn&#39;t change the fact that almost every design we see today is over designed and have each element follows it&#39;s own sense of alignment. (You can preach about minimalism later...)</p>
<p>Forget others, TillWhen&#39;s login email is a centered card with text left aligned and justified as needed with a huge center aligned button (Hypocrite much, reaper?).</p>
<p>These design choices can change based on what pleases you aesthetically but following a grid makes it all easy. Using a good grid system always comes in handy <strong>if</strong> used properly. I&#39;ve seen people nest rows inside rows inside rows with bootstrap. Don&#39;t! Just Don&#39;t!. Learn to use flexbox instead.</p>
<p>Layouts will help you get prototypes out quicker and probably why css libraries like Bulma, Bootstrap are drop in defaults from the dawn of their existence in most web frontend projects even today.</p>
<p>I&#39;m not sure if theres anything else that I can add to this.</p>
<p><strong>Adios!</strong></p>
]]>
      </description>
      <pubDate>Mon, 07 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/sleep-gave-up</guid>
      <title>Sleep Update: I gave up</title>
      <link>https://reaper.im/blog/sleep-gave-up</link>
      <description>
        <![CDATA[<p>A few weeks back I made a <a href="https://reaper.im/blog/why-cant-i-sleep">post</a> about me not being able to sleep at all and guess what? </p>
<p>It&#39;s gotten worse.</p>
<p>I now sleep at around 8PM-10PM and my body kicks me back up by 12AM-2AM. Post that, I can&#39;t do anything that&#39;ll shut me down. </p>
<p>Based on research, a normal human is sleepy around 2AM and 2PM, my body on the other hand starts getting drowsy at 6AM (Can&#39;t sleep cause I will never wake up for work on time) and 6PM.  I somehow pull myself up to 8 or 10 using coffee to complete work and stuff.</p>
<p>Overall point, my internal clock is totally botched.</p>
<p>Looks like I&#39;ll have to research more and find ways to get the clock back to normal. </p>
<h3 id="sleep-at-6-pm-then">Sleep at 6 PM then!</h3>
<p>Based on my sleep cycles, I can only sleep for 3 cycles. Each cycle being 90 minutes, making that about 4.5 hours. So, if I sleep at 6, it&#39;ll be up by 10.30 and then won&#39;t be able to sleep at all. </p>
<p>Bad Idea!</p>
<h3 id="the-title-says-you-gave-up">The title says, you gave up.</h3>
<p>About that, I kinda started accepting the shift and have started working at 2AM-2.30AM on personal projects and then give the remaining of the day to office work which I generally start at around 4AM-9AM. I plan to follow this till I figure out a reset. </p>
<p>Till then, I&#39;m a proper reaper (at least in terms of not sleeping) </p>
<p>Also, if you&#39;ve got suggestions on how to deal with this without using any kind of medication / drugs. Let me know.</p>
<p>Adios.</p>
]]>
      </description>
      <pubDate>Mon, 07 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/2020-09-02-Things-I-wish-I-did-sooner</guid>
      <title>Things I wish I did sooner</title>
      <link>https://reaper.im/blog/2020-09-02-Things-I-wish-I-did-sooner</link>
      <description>
        <![CDATA[<p>Being a self taught developer, a lot of times the path you follow is arbitrary and there&#39;s a very rare chance that 2 developers follow the same learning train.</p>
<p>One might start Frontend development, stick to it and excel only at that, one might be a curious one and jump from language to language and try to learn everything he/she possibly can.</p>
<p>Neither one is a bad developer.</p>
<p>I wished I had a mentor, might have changed the way I look at code altogether and maybe even be a better coder but then I was always the guy who could teach himself instead of the one who&#39;d learn better from teachers.</p>
<p>Now, backstory aside, here&#39;s a list of things I wished I did sooner.</p>
<h3 id="add-these-to-your-tool-belt">Add these to your Tool-belt</h3>
<ul>
<li>Git - I shouldn&#39;t even have to mention this anymore but GIT!</li>
<li>Unix Basic Commands - ls,cd,cat, grep, ps, sed, mv, pwd</li>
<li>Docker - Make your life a little more easier</li>
<li>Dokku - Make it easier for deployments and app management</li>
</ul>
<h3 id="have-a-go-to-stack">Have a Go To Stack</h3>
<p>Ironic coming from the person who changes his tech stack every 2 weeks but have a goto tech stack that you can depend on when confused on what to choose.</p>
<p>This helps you when you just want to test the waters and create a prototype or something where you wouldn&#39;t want to invest a lot of time setting up architecture but getting the base functionalities up and running to test. I&#39;ve previously made the mistake of trying to setup the perfect architecture and failing to ever start the project because of that mind block.</p>
<h4 id="heres-a-few-web-stack-examples">Here&#39;s a few web stack examples</h4>
<p>These are stacks that I&#39;ve personally worked with.</p>
<h4 id="express-starter-for-beginners--intermediates">Express Starter (for Beginners / Intermediates)</h4>
<ul>
<li>Express (Web/Rest Server)</li>
<li>PGSQL (DB)</li>
<li>Sequelize (ORM)</li>
<li>Angular / React / Vue / Svelte / RiotJs (View Layer) (Suit yourself here...)</li>
</ul>
<h4 id="hapi-starter-for-beginners--intermediates">Hapi Starter (for Beginners / Intermediates)</h4>
<ul>
<li>HapiJS (newer versions)</li>
<li>MySQL(DB)</li>
<li>Sequelize (ORM) / Knex (Query Builder)</li>
<li>Angular / React / Vue / Svelte / RiotJs (View Layer) (Suit yourself here...)</li>
</ul>
<p>Obviously you could add redis, ES , etc etc for additional requirements but I&#39;ll leave this to be the base you start with.</p>
<h4 id="what-stack-do-you-use">What Stack do you use?</h4>
<p>The one I use has an experimental server layer so I wouldn&#39;t recommend people use it right now but here goes,</p>
<ul>
<li>ftrouter (webserver layer)</li>
<li>pgsql / mongo (db layer)</li>
<li>knex.js (query builder)</li>
<li>Next.js (view layer)</li>
</ul>
<p>While I know Next.js can be used for the server part as well, I choose not too, I like keeping the UI and Server far away from each other , I did build a full monolith using Next.js but I figured that both, the amount of control and deployment time can be improved if I split them.</p>
<h3 id="maintain-a-resource-collection">Maintain a resource collection</h3>
<p>Now this is one step people avoid because everything is available on StackOverflow and various other blog posts and one of the reason I think there&#39;s a slow down in learning but that&#39;s a rant I can pick up later.</p>
<p>Have a place where you maintain code snippets , libraries , everything that you find useful. You can even store stack overflow answers if you&#39;d like.</p>
<p>The point of having a resource collection is avoid fumbling around the web when you&#39;ve solved a problem before already. I&#39;ve written time formatters multiple times now, while not proud of it I still end up writing most of my logic again and again when I could&#39;ve just picked it up from a previous codebase but then looking through 100 repositories for it is a bad idea and I could write the formatter again till then.</p>
<p>If you&#39;ve not seen it yet, <a href="https://reaper.im">reaper.im</a> has a collections section where I now store snippets I use a lot or type again and again.</p>
<p>You don&#39;t have to do this to your website but use something like Github Gist to store these snippets and something like Pocket to store blog and website links.</p>
<h3 id="learn-to-write-tests">Learn to write tests.</h3>
<p>While it&#39;s mostly a luxury and shouldn&#39;t be done for prototype projects.
It is still mandatory for you to learn how to write tests and learn at-least one test engine / test suite. It can be a full batteries included test suite or it can be a combination of test runner and a test functions library.</p>
<p>As, when the codebase moves forward from the prototype phase, it&#39;s necessary that you spend minimum time trying to figure out what has broken from an already working flow. Addition of new flows/functionalities will take longer since you have to now write tests for these but you gotta do them just once and that one time should be done properly.</p>
<p>It&#39;s ironic that I&#39;m giving this suggestion when none of my repos actually have test cases but that&#39;s because none of them have moved out of the prototype stage to begin with and the one which is into beta is <a href="https://tillwhen.barelyhuman.dev">TillWhen</a> and it has test cases to make sure the base functionality works at all times.</p>
<h3 id="master-your-code-editor">Master your Code Editor</h3>
<p>Last but not the least and probably the most important one of the bunch, keep digging through what your code editor has to offer. If you&#39;re using VSCode, learn to use it&#39;s task runners, learn to use it&#39;s in-built debugger, add visualiser plugins to test performance of code, etc ,etc.</p>
<p>If you&#39;re using Vim, learn to create macros , get to know how to manipulate larger chunks of text faster, again add plugins to speed up repetetive tasks.</p>
<p>Each famous code editor has a few tricks up its sleeves that can help you in productivity and getting faster at coding. As a programmer the editor is your home and something you spend your precious hours with.</p>
<p>Learn It, Practice It, MASTER IT!</p>
<h4 id="where-do-i-look-for-these-features">Where Do I look for these features?</h4>
<p>Read through the release notes, check if a release has added something useful, try it out , check if it&#39;s easy to use when working on code to use this functionality. I use eslint&#39;s tasks in VsCode almost instantly at this point. Command + P , Run Task, Lint whole folder, my fingers do it in seconds and I don&#39;t have to wait for VS Code&#39;s internal plugin runners to do the linting and lint fixes as that slows down the editor on my low power hardware.</p>
<p>Yeah, I code on multiple hardware at once. Shocker!</p>
<p>Similarly, I&#39;ve gotten so used to Vim&#39;s macro creator that I consider that to be the first thing that I think off when looking for repetetive tasks on the text.</p>
<h3 id="the-end">The End</h3>
<p>Adios.</p>
]]>
      </description>
      <pubDate>Wed, 02 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/callbacks-promises-generators-js</guid>
      <title>Callbacks, Promises, Generators and Why a JS Developer needs to understand them.</title>
      <link>https://reaper.im/blog/callbacks-promises-generators-js</link>
      <description>
        <![CDATA[<p>I&#39;ve had my fair share of up and downs with Javascript and it always is frustrating when the language you&#39;ve been using for a while doesn&#39;t behave the way you assumed it would but I continued using JS for almost everything I built over the past 2-3 years.</p>
<h2 id="why-javascript">Why Javascript?</h2>
<p>I&#39;m not biased towards the language, I would like to get back to being a C developer or maybe be a little modern and be a Go/Rust Developer but as I mentioned in my previous post, I&#39;ve been a little bitch about it and keep running back to JS for moral support.</p>
<p>But, I still think that learning JS is a valuable skill. Learning any programming language at this point is.</p>
<p>We though are going to go with JS to start because I can explain stuff about it a little more than I can explain C, Go, or Rust.</p>
<h2 id="it-all-started-with-him-the-dreaded-one">It all Started with him... the dreaded one</h2>
<p><strong>Callbacks</strong></p>
<p>Veterans love them, newbies fear them and others have no idea what&#39;s going on.</p>
<p>The thing about callbacks is that we are all using them in almost every JS codebase and still fail to realize that we are.</p>
<p>Anyway, getting to the basics.</p>
<h3 id="what-are-they">What are they?</h3>
<p>It&#39;s a function. A function trapped inside another one to be precise but it&#39;s still a function so let&#39;s treat them like one.</p>
<pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">functionOne</span><span class="token punctuation">(</span><span class="token parameter">callbackFunction</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token function">callbackFunction</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">functionTwo</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Variation One</span>
<span class="token function">functionOne</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">functionTwo</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Variation Two</span>
<span class="token function">functionOne</span><span class="token punctuation">(</span>functionTwo<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Now, before I explain the above, I&#39;m assuming you understand that functions in JS aren&#39;t considered different than general parameters and thus, you can pass them down to other functions.</p>
<p>This is also allowed in other languages as well so should not come as a surprise anymore to people who&#39;ve been jumping languages or to people who&#39;ve been dealing with JS a lot.</p>
<p>Let&#39;s go through the code snippet now.</p>
<p>We&#39;ve got 2 functions to start with <code>functionOne</code> and <code>functionTwo</code>, <code>functionOne</code> takes in a parameter called <code>callbackFunction</code> which could be anything, a <code>string</code> a <code>number</code> or even a <code>boolean</code> or an <code>object/array</code> for that matter, but I&#39;m going to keep it simple for us to understand and not add type checks at this point (which you should add if you are writing in just JS, ignore if you use TypeScript).</p>
<p><code>functionTwo</code> on the other hand has the same parameter signature or accepts the same number of arguments as <code>functionOne</code>.</p>
<p>If we now look at the inner code of these two we see that one declares a variable <code>a</code> and executed <code>callbackFunction</code> and passed in that value (again, <code>functionOne</code> assumes that <code>callbackFunction</code> is going to come in as a function and so blindly executes it.</p>
<p><code>functionTwo</code>&#39;s inner code is logging the passed parameter to the console/stdout(depending on where you are executing this snippet).</p>
<h4 id="execution">Execution</h4>
<p>After the declarations we have 2 variations for the execution of our functions, one being a little verbose and the 2nd being my definition of <code>readable</code> code.</p>
<ol>
<li><p>The first variation basically calls <code>functionOne</code> and passes it another function as a parameter which is called an <code>anonymous</code> function (guess why) and this anonymous function surprisingly has a <code>value</code> parameter, we didn&#39;t declare it, so how does it get it? <code>functionOne</code> passes it to anonymous function when we made the <code>callbackFunction(a)</code> and <code>callbackFunction</code> is now pointing to our anonymous function because this is what we passed as a parameter and then we just call our <code>functionTwo</code> and pass it the received value.</p>
</li>
<li><p>The second variation is used when there&#39;s only one function that needs to be executed with the incoming value from <code>functionOne</code>, you should still go with Variation one if you&#39;re going to use the value more than once. Now this works because we are still passing <code>functionOne</code> a <code>callbackFunction</code> which takes in one value and similar to the 1st variation, it accepts the value and runs its logic with it.</p>
</li>
</ol>
<p>You can copy the above code and run it on any JS playground and you should see that the number <code>1</code> is printed twice.</p>
<h3 id="why-use-callbacks">Why use Callbacks?</h3>
<p>As I said, you&#39;re using them everywhere in JS without realizing that you are but, as to why use them? It&#39;s a very simple answer.</p>
<p><strong>Scoped Data Access</strong></p>
<p>If you&#39;ve not gone through the internals of JS this might be a little hard for me to explain but I&#39;ll give it a try.</p>
<p>Like most languages, you have data scopes that are maintained by the interpreter or compiler which is why you can access variables only under certain conditions.</p>
<p>If you go back to the above example, you can see that <code>var a = 1</code> is defined inside <code>functionOne</code> and thus can only be used by <code>functionOne</code>&#39;s scope or by code that is inside <code>functionOne</code> but what do you do if you want that data to be accessible to other functions because if you write everything inside one function, then it beats the point of having functions and or thinking about creating modules altogether.</p>
<p>This is where callbacks excel and this is why JS is very async friendly.</p>
<p><code>async</code> - asynchronous programming, I&#39;ll explain this in detail in another post.</p>
<p>When you write code with async programming in mind, the chances of you blocking the execution thread is very low, unless you hit a deadlock between two callbacks calling each other or you forgot to break a loop.</p>
<p>So if we go back to our example, we see that <code>a</code> is passed to <code>functionTwo</code> from <code>functionOne</code>&#39;s scope and then <code>functionTwo</code> just prints its. That is a very naive example and in real-life code, callbacks aren&#39;t that clean and easy to read.</p>
<p>If dealing with dependant data and working with data from the network, you&#39;ll probably see your code go south like this.</p>
<pre><code class="language-js"><span class="token keyword">function</span> <span class="token function">dataFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">someNetworkRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">formatFetchedData</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> formattedData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> err<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">processFormattedData</span><span class="token punctuation">(</span>formattedData<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> processingResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> err<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token function">sendResultBackToServer</span><span class="token punctuation">(</span>processingResult<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> serverResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// let's end this with a console.log</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>serverResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">formatFetchedData</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//relevant code</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">processFormattedData</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//relevant code</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">sendResultBackToServer</span><span class="token punctuation">(</span><span class="token parameter">param<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//relevant code</span>
<span class="token punctuation">}</span>

<span class="token function">dataFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>A 3 level callback dependency can be readable but obviously, a complex app won&#39;t stop at 3 and while I could write something cleaner with an async chaining utility, a very famous one is <code>async.js</code> and we could use it&#39;s <code>waterfall</code> method to keep passing down upper dependencies to the lower functions, it&#39;s a little more manageable but still messy in larger codebases.</p>
<h3 id="the-solution-to-the-living-hell">The Solution to the Living Hell</h3>
<p><strong>Enter Promises</strong></p>
<p>The above-mentioned chaining is still the solution to avoiding the triangular callback code but with a little more magic handled by the wrappers.</p>
<p>You see, someone wrote a library called <code>q</code> which was the initial concept of how promises have grown to be today, this was followed by bluebird&#39;s promise polyfills which overall implement the same <code>thenable</code> paper.</p>
<h3 id="thenables">Thenables</h3>
<p>We are still going to have the callbacks in our life but we are going to put on a little makeup on them so we can bear them for longer sessions.</p>
<p>Thenables when explained simply, is a stateful container that can be chained by <code>.then</code> caller functions and each caller function creates another thenable. A recursive chain of wrappers to be precise.</p>
<p>I&#39;ll explain with the same example</p>
<pre><code class="language-js"><span class="token comment">//Variation One</span>
<span class="token function">dataFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">formatFetchedData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">formattedData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">processFormattedData</span><span class="token punctuation">(</span>formattedData<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">processingResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">sendResultBackToServer</span><span class="token punctuation">(</span>processingResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">serverResult</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>serverResult<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Variation two</span>
<span class="token function">dataFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">formatFetchedData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">formattedData</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">processFormattedData</span><span class="token punctuation">(</span>formattedData<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">processingResult</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">sendResultBackToServer</span><span class="token punctuation">(</span>processingResult<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">serverResult</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>serverResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//Variation Three</span>
<span class="token function">dataFetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>formatFetchedData<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>processFormattedData<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>processingResult<span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>If you understand the verbose example, you can understand how the other 2 variations work and this is obviously much neater than plain callbacks but as I said, we are still going to continue using callbacks because the language depends on it. The solution/promises are just a better way to handle it.</p>
<p>As visible, we still pass functions down to a wrapper/caller function that takes in the returned data and passed it to the next then in the chain because every function being called inside a <code>.then</code> is treated as another Promise and hence can be chained to be such.</p>
<p>I&#39;ll try to simplify how Promises work internally.
The Promise constructor maintains a state for itself. <code>pending | fulfilled | rejected</code> these 3 per promise decide if the call was successful, or failed and based on it, they call a <code>.then</code> or a <code>.catch</code>.</p>
<pre><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>To explain this we&#39;ll consider the above example. I create a new Promise using the words <code>new Promise</code> and this constructor takes in a callback that is passed 2 params, <code>resolve</code>, and <code>reject</code>.</p>
<p>Pause.</p>
<p>At this point we have a Promise with the state <code>pending</code> because nothing has actually been a success or a failure and it&#39;ll stay that way till you, the person who&#39;s writing this promise decides.</p>
<p><code>resolve</code> tells the constructor that the run was successful and you can execute your <code>.then</code> function&#39;s callback and pass it the data that it has received. In our case, <code>true</code> is passed to <code>.then</code>.</p>
<p><code>reject</code>, on the other hand, calls the <code>.catch</code> with the passed value and this is where the state changes to <code>rejected</code></p>
<p><strong>You didn&#39;t mention the state changing to <code>fulfilled</code> !!</strong></p>
<p>I know. Patience, human.</p>
<p>The <code>fulfilled</code> state is updated but under certain conditions, if there was only one <code>.then</code> call, then the main constructor is now <code>fulfilled</code> but if you chained it with more and more <code>.then</code>s then each one has it&#39;s own state and even though the first constructor might have resolved and changed to <code>fulfilled</code> you&#39;ll still see pending in the console because the chained ones each have their Promise instance which still has the state as pending.</p>
<p>In the end, we have a few callbacks and a constructor wrapped around our callbacks to make this chaining possible and code a lot more readable.</p>
<h3 id="generators">Generators</h3>
<p>This is a huge topic so I&#39;m going to explain it in another post sometime in the future but for now all you need to know is that generators are special kinds of functions that allow you to iterate over and over till you decide to end the function altogether.
This is the actual concept that <code>async and await</code> works on. You can write your custom async-await implementation using a few generators and promises.</p>
<h3 id="the-chosen-one">The Chosen One</h3>
<p><strong>Async|Await</strong></p>
<p>Now even though I&#39;m someone who likes promises more than I like async-await, mainly because I keep forgetting to add the async keyword on my functions and I&#39;m too used to writing <code>thenables</code> to control my async flow, still as a programmer we gotta learn what&#39;s new. Isn&#39;t always better but if you know your options you can choose the ones that suit the condition.</p>
<p>As mentioned in Generators, you can create your a custom async-await wrapper if you&#39;d like too since the interpreters will actually compile your async-await code into generators anyway.</p>
<p>Generators allow you to iterate over itself and used a keyword called <code>yield</code> which allows you to throw value out of the generator and take in another value for the next yield till you decide to end it&#39;s life with a <code>return</code>, much like normal functions.</p>
<pre><code class="language-js"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">infinite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> index<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">infinite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "Generator { }"</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre>
<p>With this in place, I can have one generator run, get an async value and yield it out of it, then pass it back to the generator and it can run the next <code>yield</code> scope and so on till it decides to stop. You need to understand that while yielding we are still resolving promises and <code>async/await</code> is nothing more than syntactic sugar for creating and resolving promises and as always, it&#39;s also based on the concept of callbacks and hence each of them creates a slight delay if compared to async functions written with just callbacks. But, developer experience and sanity need to be kept in check, else we&#39;ll have all JS developers in some Asylum yapping about callbacks all day long.</p>
<p>In technical terms, Javascript&#39;s concept of considering functions as first-class types improves the composition and this is something that functional programming languages generally have.</p>
<p>The composition works well but then you gotta limit the level of abstraction you create ( a rant for later )</p>
<p>Overall, a general idea of how the internals of the language dictate your control flow helps you make better choices and this can be seen by the concept of <code>callbacks</code> which is a spec that <a href="https://twitter.com/andrestaltz/">André Staltz</a> came up with, which is creating a Pub/Sub model using just callbacks and using them for streams (Again, will make a post about this as well).</p>
<p>Make sure you don&#39;t create a callback hell inside a thenable though.</p>
<h2 id="that-was-long">That was long....</h2>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Tue, 01 Sep 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/2020-08-28-Projects-Delays-and-Go-Lang</guid>
      <title>Projects Delays and Go Lang</title>
      <link>https://reaper.im/blog/2020-08-28-Projects-Delays-and-Go-Lang</link>
      <description>
        <![CDATA[<p>I&#39;ve been slacking off on personal projects for a while now and it&#39;s not because I want to throw these projects out of the window but because I&#39;ve been learning Go Lang for the past few weeks and I&#39;m not able to dedicate time to actual coding just yet. </p>
<h3 id="sorry-what">Sorry, What?</h3>
<p>Umm, I&#39;m trying to say that I&#39;ve been reading books and blogs about Go  for the past few weeks and that is pulling away time from me to spend on building new projects and/or optimise and improve TillWhen.</p>
<p>While I myself say that doing actual projects help you learn faster it doesn&#39;t apply when you directly want to build a huge project in a new language.  </p>
<p>It is a necessary step to learn the language inside out since just treating it like an equivalent of another language I know already, will limit us from actually understanding the actual use case of the new language and also blocks our paths when reaching out for help. </p>
<p>If you don&#39;t know what the language calls a particular type or a function and you search on google based on your previous language experience, you are going to get stuck.</p>
<h3 id="why-go-lang">Why Go Lang?</h3>
<p>I&#39;ve been switching back and forth between Node(Javascript) , Rust and Go for a while now and every time I hit a road block in Rust and Go, I immediately jump back to Node to complete the project or tool and this  has been a pattern because I lack the theoretical knowledge of the language and have been treating it like a replacement for Node , which it&#39;s not and this thinking has been hindering my progress.</p>
<p>A few weeks back I decided to build a project management portal for solo developers which I didn&#39;t continue to build because it was going to have it&#39;s own Git server and stuff but then the git implementation and the total size of the binary crossed 70MB and I wouldn&#39;t want someone to self host something that takes up 70MB with just 2% of the features and this is because it is hard to get rid of node_modules completely when bundling to a binary and then I remembered about <a href="https://github.com/sosedoff/pgweb">pgweb</a> which is just 8MB and is bundled with a full fledged Postgres web UI.</p>
<p>I liked that and since the Go portable binaries are really well optimised, scaling to desktop apps using an RPC server in Golang would make building native apps a little more easier but, the history of me jumping away from the language every time theres even a minute inconvenience was going to get in the way. </p>
<p>I started researching on how various people moved from language to language and things they had learned about this move. 
The things they wish they considered, the things that blocked them or took them time to understand, everything.</p>
<p>I got the answer that I&#39;ll need more theoretical programming knowledge specific to this language to be able to avoid most of the blocks and the only ones remaining would depend on the newer packages that I&#39;d add to the codebase, which makes sense and hence, I started reading.</p>
<p>I&#39;m almost done with the book so I&#39;ll be working on small tools and maybe even rebuilding tools just to get better at the language and then get to the project management app again.</p>
<h3 id="the-point-of-the-post">The Point of the Post?</h3>
<p>There&#39;s never one.</p>
<p>Adios!</p>
]]>
      </description>
      <pubDate>Fri, 28 Aug 2020 00:00:00 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/browsers-code-editors</guid>
      <title>Browsers and Code Editors</title>
      <link>https://reaper.im/blog/browsers-code-editors</link>
      <description>
        <![CDATA[<p>There was a hint in the previous <a href="https://reaper.im/blog/off-grid-digitally">post</a> where I mentioned I&#39;d be building a lot of the tools that I use from the ground up and since I normally build stuff with my requirements in mind they turn out to be very minimal.</p>
<p>A lot of stuff that I&#39;ve built is either tied to this website or you can find it on the <a href="https://reaper.im/work">work</a> page and I was told that in my idea of reinventing the wheel for almost all tools was stupid but also interesting but mostly stupid .</p>
<p>While I agree to that, and you shouldn&#39;t be reinventing the wheel when working on production apps for clients , it&#39;s okay if you are doing it to learn. I consider myself really lucky that I&#39;ve got all these resources out there that I can learn from and it actually makes it easier to find better explanation to stuff if the man page or documentation of a certain library or tool isn&#39;t well documented.</p>
<h2 id="hows-you-learning-going-to-be-helpful-to-us">How&#39;s you learning going to be helpful to us?</h2>
<p>It won&#39;t. You might not be a fan of the minimal approach to things but if you are , you might have another option to choose for when choosing code editors. I still VIM is the best there is but then that&#39;s just my opinion.</p>
<p>If someone has observed the pattern of my repositories, you&#39;d notice the things I&#39;ve built or have forked to go through are for building a code editor. If unclear let me guide you through the mini-tools I&#39;ve rebuilt.</p>
<ul>
<li>Apex (Mini Web Code Editor)</li>
<li>Mark (Markdown Editor)</li>
<li>Snips (My goto code snippets)</li>
<li>Hen | Hen-Experimental (React Code playground)</li>
<li>Nova (my half baked attempt at the code editor)</li>
</ul>
<p>and the forks include</p>
<ul>
<li>Atom (For learning how they structured the modular approach)</li>
<li>Carbon (to figure out how the syntax highlighting was working, should&#39;ve just inspected and I&#39;d know it was codemirror but then I went through a few other things like global config and a few nice ideas for better maintainability). I might have delete this fork though, don&#39;t remember.</li>
</ul>
<p>Obviously no one is that observant but it&#39;s been going on for a while. I also wanted to take on building a browser but I&#39;ll get to why I didn&#39;t later in the post.</p>
<p>The above minitools each have attempts of figuring out how I could abstract each part of the final code editor into modules of its own thus making the final editor a lot more pluggable with various tools and to get a basic understanding of how plugins can be made a lot more scalable.</p>
<p>Apex takes on adding tabspaces etc to an existing textarea on the web which isn&#39;t that helpful when you build the editor using something like Go Lang, but I just wanted to see how the syntax highlighter actually worked, and yes, I did go through codemirror and primjs&#39;s codebases to see how they were doing it and work on improving where I could.</p>
<p>Mark on the other hand was a failure because I didn&#39;t really complete it to the point that I wanted to. I wanted it to be like a wysiwyg editor where the markdown would update as you typed and reflected in the same editing space something like Typora, but I never went ahead with the idea and instead left it out there like every other web based markdown editor. So, technically didn&#39;t learn much from it but was still in the right direction so I&#39;m going to give it a break.</p>
<p>Similary, Hen and Snips were experiments to figure out visualisation methods and while doing that I added a Mini playground for react components. Took 2 approaches to make it , one with iframe and one with a contained div , though I think the iframe approach would be a lot more secure but either way, I&#39;ve got helper code for both now.</p>
<h2 id="thats-slow">That&#39;s slow.</h2>
<p>It is, yes. That&#39;s also the reason why I didn&#39;t really try making a browser. Even though there are terminal based options out there that I do like using but, I like the dev tools experience of Firefox and so it&#39;s hard for me to actually think about building one right now with a day job.</p>
<p>Building both a browser and a code editor in parallel would get me burnt out in no time but don&#39;t worry, there will be a day when I attempt making a browser.</p>
<p>Also, it&#39;s going to be slow because</p>
<ol>
<li>I&#39;m not making it to earn from it and only making it because it helps me learn and as a result there might be one more editor for people to use.</li>
<li>Expecting to live off of donations is very ambitious thing to do, unless you build something really useful which doesn&#39;t happen everyday, at least not for me. I rarely have good ideas for products.</li>
<li>If I do build this in a hurry, I won&#39;t be satisfied with the result and won&#39;t use it and the project will sink down in my git repositories like other abandoned projects that I thought I&#39;d waste time building.</li>
</ol>
<pre><code>Tip: For people who are expecting to earn via Open Source,
your best bet is to go the Open Core way which a
lot of Open Source purists won&#39;t like and the
other one is to offer managed services
while giving away a self hosted solution for free.
Gitlab, SourceHut, Mongo, you get the idea.
</code></pre>
<h2 id="whats-wrong-with-the-current-ones">What&#39;s wrong with the current ones?</h2>
<p>Oh there&#39;s nothing wrong with the current ones. As I said I like building these things both to learn and to have my own take on something as solution and try to not kill the ram.
And to think I was going to build it with Electron was the first mistake but I have a better approach now, it&#39;s a very old one but still the best way to go through building desktop tools in my opinion.</p>
<p>The requirements for the editor though,are very minimal and the existing solutions. Atom, VSCode, end up offering a lot more that I&#39;m every going to use.
I&#39;m not kidding, I made a post long back about my <a href="https://reaper.im/blog/my-vscode">vscode setup</a> and I&#39;ve gotten rid of the other themes and only using Min Theme now and don&#39;t even have polacode and music time anymore. Also, Sublime and VIM are great alternative and I do use them right now more than I use VSCode. I still want to try building one.</p>
<p>To sum it up, this is all I want</p>
<ul>
<li>Bracket Matching</li>
<li>Syntax highlighting(optional but nice to have it)</li>
<li>Decent Duo Tone or Monochromatic Dark/Light theme</li>
</ul>
<p>Why don&#39;t I use any other plugins? Well basically because I have everything else handled by tools that run when i commit or are setup to run as a github action.</p>
<p>My linters run during commit, formatters run during commit and also as a github action to make sure all files are formatted and not just the ones that were just staged and I sometimes directly edit from Github&#39;s web editor so those changes are formatted for me automatically from the action.</p>
<p>Stuff like this doesn&#39;t need to be done in realtime because I&#39;ve been coding for a long time now and silly mistakes like typos and all are rectified during testing.
You&#39;ll still see a lot of <code>typo</code> messages in my commits because I commit the functionality before I test it and then add fixes as their own separate commit. I like being verbose about the mistakes I made.</p>
<p>Anyway, building an editor with just the above 2 functionalities should be simple right? Well that&#39;s the thing, I tried doing it with Nova with 0 knowledge of how large amounts of text buffers are to be handled and what data structures i was supposed to use and that botched the project before I even started and that&#39;s when I went the route of building every module slowly and understanding things I need to learn and think about before going ahead and jumping into building it.</p>
<p>Don&#39;t worry, you&#39;ll get updates of my progress with it after I&#39;m done with <code>dark</code> which is the current project I&#39;m working on. Haven&#39;t really told anyone on what&#39;s it&#39;s going to be but I will once I have an mvp ready for it.</p>
<p>Adios.</p>
]]>
      </description>
      <pubDate>Sun, 23 Aug 2020 11:09:52 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/off-grid-digitally</guid>
      <title>Off-Grid Digitally</title>
      <link>https://reaper.im/blog/off-grid-digitally</link>
      <description>
        <![CDATA[<p>People who know me, have a brief idea of how opinionated I am as a person and how I&#39;d normally stand for something that I think is illogical on the broader picture no matter how emotional the other person might be with the decision and this leads to a lot of arguments or discussions with certain people.</p>
<p>Now, why do you need to know that about me and how does it relate to this post?</p>
<p>Because that is one of the reasons why I avoid social media and talking to people in general, having a blog with no comments section gives me the power to not have to worry about what the response is going to be and that freedom let&#39;s me talk out cleary.
While I can do that in person too, because the whole internet won&#39;t jump on me for something I think is right.</p>
<h2 id="whats-with-going-off-gird">What&#39;s with going Off-gird?</h2>
<p>Off-grid it self means living without dependence on the public utilities, so self farming/hunting for food, building everything by yourself, basically being able to get anything and everything done the tribal way and living off of your own skills.</p>
<p>While I might end up that way sometime in the future, I can&#39;t do it right now so instead I&#39;m onto something I can do, get rid of stuff that&#39;s unnecessary and taking up my time from things I like to do and that&#39;s use of social media.</p>
<p>I&#39;ve been moving away from social media for a while now, destroyed my facebook account during college 2017, stopped double tapping on instagram around early 2019 and tested micro blogging on twitter for the past few weeks.</p>
<p>The only &quot;social&quot; profile I have had active for the longest time is LinkedIn and that&#39;s because it&#39;s easy to forget about and just have the profile exist as an online resume.</p>
<p>Not that I need one anymore because If I do ever resign from the current job it&#39;ll be for working on solo projects , much like <a href="http://drewdevault.com/">Drew Devault</a>.</p>
<p>Yeah, I might delete my linkedin soon too. Not sure how soon but soon and this doesn&#39;t just include social media it also includes instant messaging platforms like WhatsApp which I&#39;ve been on and off, multiple times now because people force me back onto it for that 5 min conversation that we could&#39;ve had on a call but anyway that&#39;s gone this time and permanently.</p>
<h2 id="how-do-we-contact-you-then">How do we contact you then?</h2>
<p>The people who work with me, already have slack for that and for everyone else.
This website isn&#39;t going anywhere and gives you the mode of contacting me , right on the homepage</p>
<h2 id="self-hosting-stuff">Self Hosting stuff</h2>
<p>The real reason I&#39;m going to be able to sustain this is by having tools available to me on my local servers. I&#39;ve had multiple local servers just sitting there working as side runners to multiple personal apps I&#39;ve built over the years.</p>
<p>Since the plan is to get away from dependencies on online SaaS services. I have decided to move to self hosted options of most of what I use and while I will be using these self hosted apps to start with, I&#39;ll be moving to versions I build for each of these.</p>
<ul>
<li><strong>Github</strong> - Gogs | Sourcehut | Gitlab Self Hosted</li>
<li><strong>Gmail</strong> - Mailcow</li>
<li><strong>Digital Ocean Containers</strong> - Raspberry Pi Clusters</li>
<li><strong>9Gag/Reddit</strong> - I don&#39;t think I need accounts to browse these, so I&#39;ll be fine</li>
<li><strong>Dev.to</strong> - I&#39;ve got this blog and I mostly post everything here so Dev.to account makes no sense anyway.</li>
<li><strong>Vercel/Heroku</strong> - Ah, these I&#39;m going to miss but, I do have <code>dokku</code> setup in most deployments so it&#39;s okay.</li>
<li><strong>Github Actions</strong> - This, the automated runners, luckily sourcehut provides this and so does gitlab.</li>
</ul>
<h3 id="running-away-loner">Running away Loner?</h3>
<p>I wish. I&#39;ve got a god complex, I know, you know, everyone knows.</p>
<p>Let&#39;s get back to the first paragraph now, In my opinion it&#39;s easier for me to be productive when things are under my control and not under some guy with a lifetime of data on me and hence, without giving 2 cents about what people will think, I planned all of this.</p>
<p><em>Why this whole post then?</em></p>
<p>Oh this is so I don&#39;t have to explain it again to each person that has a question, <em>Why no whatsapp?</em> or <em>Why can&#39;t I find you anywhere online?</em> and also for the never ending list of &quot;friends&quot; who go &quot;No I don&#39;t need anything, just casually texted&quot; quite often (remember, the homepage has you covered)</p>
<h2 id="security">Security</h2>
<p>Won&#39;t you be giving away you IP address when you setup everything locally?
Most of what I build is already open source and doesn&#39;t really take in any user data other than an email to have verified logins.</p>
<p>Also, my IP/VPN is tracked by my ISP, google... everything that&#39;s there online so it makes no sense to try to hide it anyway. Can&#39;t go to 0 digital signature when I&#39;m a coder anyway.</p>
<p>Plus, after this movement I plan on making everything I ever built to be easily self hosted on various online providers like heroku and vercel for people who&#39;d like to use them, so then the security of using them becomes your concern and not mine anymore.</p>
<p>Adios.</p>
]]>
      </description>
      <pubDate>Wed, 19 Aug 2020 08:22:20 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/the-budget-mechs</guid>
      <title>Mechanical Keyboards - India - Mid 2020</title>
      <link>https://reaper.im/blog/the-budget-mechs</link>
      <description>
        <![CDATA[<h2 id="mechanical-keyboards">Mechanical Keyboards</h2>
<p>This is going to be a really short writeup on what mechanical keyboards are and then we&#39;ll get to the options available to us right now in India, mid 2020.</p>
<p>You can go all the way down to the buying options and skip the other info if needed.</p>
<ul>
<li><a href="#what-are-we-talking-about-again">Overview</a></li>
<li><a href="#what-can-i-buy">Buying Options</a></li>
</ul>
<h3 id="what-are-we-talking-about-again">What are we talking about again?</h3>
<p>Mechanical keyboards are the much more robust version of your day to day keyboard. The keyboards you normally see around are membrane keyboards which are cheaper to produce and use digitial contacts to figure out what key was pressed.</p>
<p>On, the other side we have the <em>Mechanical Feel</em> keyboards which are basically the same membrane keyboard but with clicky keys trying to imitate Mechanical keyboards and these are also available at a decent price range, you can invest in these if you don&#39;t really want to spend much on mechanical keyboards but then we do have a few budget options right around the same price.</p>
<p>Finally, Mechanical Keyboards. I&#39;m just going to go over the important components that&#39;ll get you enough knowledge to get started.</p>
<p>We&#39;ve got 4 components</p>
<ul>
<li>The box / case</li>
<li>PCB - Circuit board</li>
<li>Switches - Key Mechanism</li>
<li>Key Caps</li>
</ul>
<h4 id="the-case">The Case</h4>
<p>It&#39;s the casing for the actual keyboard, there&#39;s nothing much to tell here other than the various varieties out there. You can get 3d printed cases, metal cases, plastic cases, wooden cases, there&#39;s a whole bunch and each has it&#39;s own cost and when going the budget route, the obvious choice is the plastic case. Don&#39;t worry, there&#39;s a few cases that are really sturdy even if plastic</p>
<h4 id="pcb">PCB</h4>
<p>Now this is what the cable/bluetooth/wireless receiver addon is on and your system connects to this to detect the passed signals or in even simpler words, this circuit board takes care of actually passing the required digital signals for the system to detect what is being typed.</p>
<h5 id="hot-swappable-vs-soldering">Hot Swappable vs Soldering</h5>
<p>There&#39;s 2 types of PCB&#39;s , or circuit boards. One which allows you to directly plug in the switches and one which needs you to solder the connection points to the board. The one&#39;s you can plug into are called Hot Swappable boards and the others are called solder boards.</p>
<h4 id="switches">Switches</h4>
<p>Now part 1 of the fancy stuff, the keyboard tech has improved over time and you&#39;ve got a lot of options for the switches you&#39;d like to use. You&#39;ve got really clicky switches to really silent switches. Unfortunately, there&#39;s not much you can get directly in India and are limited to a few brands but you can import a lot of the other ones from various places online but the options in this post will be limited to stuff you can buy from Amazon and/or online local mechanical keyboard resellers like PCStudio and Meckeys.</p>
<p>Short explanation of the switches,</p>
<p><strong>Clicky</strong> - Keys that make a nice loud click sound, just like a typewriter.</p>
<p><strong>Tactile</strong> - Need lesser pressure to activate and is normally good for games where the action needs to be instant</p>
<p><strong>Linear</strong> - You&#39;ll have to press the key all the way down like membrane keys to activate it</p>
<ul>
<li>Blue - Tactile and Very Clicky</li>
<li>Brown - Tactile (mostly found in gaming keyboards)</li>
<li>Red - Linear</li>
<li>Red Speed - Linear but needs lesser force to activate the key</li>
</ul>
<p>There&#39;s obviously more types of switches, you&#39;ve got blacks, silvers, jades , but these are the most common ones and most prebuilt keyboards will come with one of these.</p>
<p>Now, the most heard thing in the Mech Keyboard community is the Cherry MX Switches, now while the german engineered switches are a great choice overall,Gaterons are another set which can be your first choice when spending a good amount of money while building a custom mech. They might be a little harder to obtain in India but as always we&#39;ve got alternatives.</p>
<p>On the contrary, you can find all of these on various international markets online, since it&#39;s a little hard to obtain them right now without paying huge amounts of customs, we&#39;ll stick to the below options.</p>
<p>Namely</p>
<ul>
<li>Outemu</li>
<li>Kailhs</li>
</ul>
<p>Now each of them have the same colors available and each have their own level of tactility and force to activation but they try to replicate the original color pattern I mentioned above so you should be fine. Now these are available at different rates online and you can obtains most of them form Meckeys and Amazon. These are all good switches anything else is probably a clone (ironically outemu is actually a clone, i&#39;ll let you do the research on that).</p>
<h4 id="keycaps">Keycaps</h4>
<p>And Part 2 of the fancy stuff , the keycaps. The switches are basically you&#39;re medium to connect the keycaps to the PCB and once they are in place all you have left is adding the keycaps. Now keycaps have a wide range and are just a search away on Amazon and Meckeys.</p>
<p>There&#39;s so many out there that I didn&#39;t even want to add them in the options below but I guess I&#39;ll just add the ones I like and you guys can get ahead and get others if you want too.</p>
<p>Yes, you can buy a cheap mechanical keyboard and replace the keycaps to make it look better than the cheap legend/font it comes with.</p>
<h3 id="what-can-i-buy">What Can I Buy?</h3>
<p>These are based on the date of the post and the prices have been fluctuating on amazon for a while now so they may get out of the price brackets but the point of this post is to list out valid buying options.</p>
<p>You can also go through Keychrons which are available at different price ranges and can be found from their website <a href="https://keychron.in">keychron.in</a> , these keyboards mostly come with Mac support so is preferred by Mac Users but you can use almost any keyboard mentioned below by just switching the modifier keys in the macOS keyboard preferences.</p>
<h4 id="2000---4000-inr">2000 - 4000 INR</h4>
<p>The tightest bracket but you&#39;ve got a few options.</p>
<p><strong>Set your Expectations</strong></p>
<ul>
<li>Plastic builds</li>
<li>Cheap keycaps (Not all of them but most of them)</li>
<li>Blue and Brown switches ( Outemu / Kailhs )</li>
<li>Static Backlighting (might be multicolored but rarely full rgb)</li>
</ul>
<p><strong>Links</strong></p>
<ul>
<li>Ant Esports MK1000 <a href="https://www.amazon.in/Ant-Esports-MK1000-Multicolour-Mechanical/dp/B07L9TC558">Link 1</a> <a href="https://www.pcstudio.in/product/ant-esports-mk1000-multicolour-led-backlite-wired-tkl-mechanical-keyboard-2/">Link 2</a></li>
<li>Zebronics Nitro <a href="https://www.amazon.in/Zebronics-Nitro-Mechanical-Keyboard-Retractable/dp/B07B29BQHH/ref=sr_1_1?dchild=1&amp;keywords=zebronics+nitro&amp;qid=1597815390&amp;sr=8-1">Link</a></li>
<li>Zebronics Max Pro <a href="https://www.amazon.in/Zebronics-Mechanical-Wired-Keyboard-Black/dp/B078NWJ6VM/ref=sr_1_1_sspa?dchild=1&amp;keywords=zebronics+max&amp;qid=1597815355&amp;sr=8-1-spons&amp;psc=1&amp;spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUExNFBBT1JQWlFPOTJTJmVuY3J5cHRlZElkPUEwMzU4MTk4MUlUNFJPSzBLODlQTSZlbmNyeXB0ZWRBZElkPUEwMTc2OTExVFhOMzVKU0ZNVDVMJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==">Link</a></li>
<li>Reddragon Usas <a href="https://www.amazon.in/Redragon-Mechanical-Gaming-Keyboard-Black/dp/B016MBNR8M/ref=sr_1_3?dchild=1&amp;keywords=red+dragon+vara&amp;qid=1597815578&amp;s=computers&amp;sr=1-3">Link</a></li>
<li>GK61 &amp;&amp; GK64 <a href="https://www.meckeys.com/shop/keyboard/60-keyboard/gk61/">Link 1</a> <a href="https://www.meckeys.com/shop/keyboard/60-keyboard/gk61-rgb-white/">Link 2</a></li>
</ul>
<h4 id="6000---10000-inr">6000 - 10000 INR</h4>
<p>You&#39;ve find a good amount of prebuilt options at this range and also build a custom one if you&#39;d like too.</p>
<p><strong>Set your Expectations</strong></p>
<ul>
<li>Plastic builds (but known brands)</li>
<li>Good Keycaps</li>
<li>You can get options for red</li>
<li>Most of them will have RGB but expect static lightings in certain options as well</li>
</ul>
<p><strong>Links</strong></p>
<ul>
<li>Ducky One 2 TKL <a href="https://www.meckeys.com/?s=Ducky+one+2+tkl+&amp;post_type=product">Link</a></li>
<li>Ducky One 2 Full Sized <a href="https://www.meckeys.com/?s=Ducky+one+2+full&amp;post_type=product">Link</a></li>
<li>DUCKY ONE 2 MINI <a href="https://www.meckeys.com/shop/keyboard/60-keyboard/ducky-one-2-mini-horizon/">Link</a> <a href="https://www.meckeys.com/shop/keyboard/60-keyboard/ducky-one-2-mini-bon-voyage/">Link</a><ul>
<li>You can find more options in terms of case and keycaps on Meckeys.com</li>
</ul>
</li>
<li>Hyper X Alloy Pro TKL <a href="https://www.meckeys.com/shop/keyboard/80-keyboard/hyperx-alloy-fps-pro/">Link 1</a> <a href="https://www.pcstudio.in/product/hyperx-alloy-fps-pro-cherry-mx-red-switches/">Red</a> <a href="https://www.pcstudio.in/product/hyperx-alloy-fps-pro-cherry-mx-blue-switches/">Blue</a><ul>
<li>Has stock at the time of posting, but about 10, so might change by the time you read this</li>
</ul>
</li>
</ul>
<h4 id="10000-inr">10000+ INR</h4>
<p>At this price you can go for most options on Meckeys.com and Amazon but the recommend brand to go for would be <strong>Varmilo</strong> in and if you can, build a custom one.</p>
<h4 id="custom-keyboard">Custom Keyboard?</h4>
<p>Yeah, you can build a custom one, you can find various videos online to get you through this but the simplest one would be with the options below.</p>
<h5 id="base">Base</h5>
<p>GLORIOUS GMMK CUSTOMIZABLE TKL RGB - <a href="https://www.meckeys.com/shop/keyboard/80-keyboard/glorious-gmmk-customizable-tkl-rgb/">Link</a>
Comes with the pcb and the case already, don&#39;t have to mess with that when starting out.</p>
<h5 id="switches-1">Switches</h5>
<p>Kailh Box Switches - <a href="https://www.meckeys.com/shop/accessories/keyboard-accessories/key-switches/kailh-box-switch/">Link</a>
Comes in packs of 10 so you&#39;ll need 90 keys , round it to 100 for extra switches for use later</p>
<h5 id="keycaps-1">Keycaps</h5>
<p>ABS BACKLIT DOUBLE SHOT KEYCAP – WHITE - <a href="https://www.meckeys.com/shop/accessories/keyboard-accessories/keycaps/tai-hao-abs-backlit-white/">Link</a></p>
<p>I like the off white tone of these, so I chose these, you can find a lot of options over at meckeys and amazon.</p>
<p>Now this should cost you anywhere around 10k to 14k based on what you choose and that sums up our post.</p>
]]>
      </description>
      <pubDate>Wed, 19 Aug 2020 04:58:49 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/why-cant-i-sleep</guid>
      <title>Why can't I sleep ?</title>
      <link>https://reaper.im/blog/why-cant-i-sleep</link>
      <description>
        <![CDATA[<p><code>This post has no informational content and is just me sharing my thoughts and opinions.</code></p>
<p>I&#39;ve had countless nights where, no matter what I do I just can&#39;t fall asleep. I&#39;ve tried light music, meditation, no music, working out, banging my head on the wall.</p>
<p>Okay, I might not have tried working out but point being, I&#39;ve tried a lot of &quot;sleep hacks&quot; out there to know that nothing actually works when my brain isn&#39;t tired. Problem is, I don&#39;t know how to get it to be tired enough to fall asleep instantly. I don&#39;t mind sleeping at random times during the day but then, it hinders my personal projects. Since, I have a dedicated time in the evening after office where I spend time thinking/learning/building.</p>
<p>You know there&#39;s this &quot;hack&quot; online  which says, the temperature of the room to the  temerature of the body plays a role in you sleeping. I&#39;d believe that but then it didn&#39;t work for me so I&#39;m going to discard that.</p>
<h2 id="insomnia-">Insomnia ?</h2>
<p>Nah, I don&#39;t think so but, it might be.
I mean, I&#39;ve had days I&#39;ve slept for more than 12 hours and days where even 2 is a hard task. The brain runs wild on these days is all that I&#39;ve observed and it seems to be a problem with a lot of people.</p>
<p>No, I don&#39;t have my phone on my eyes while I&#39;m trying to sleep. Its just there beside my pillow connected to a charger playing the music that I normally listen while trying to sleep.</p>
<p>I guess the thoughts I have while trying to sleep need to be controlled for me to actually fall asleep but that isn&#39;t always a conscious thing and at some point I do loose control. Can&#39;t medidate for hours together waiting for the body to finally give up. Even if the body does give up, the mind doesn&#39;t.</p>
<p>My biggest problem, it forces me into thinking about things I want to forget. Things I&#39;d like to delete from my memory but nope! not going to let that happen. You know why? Cause someday, someone might want to know how I tried to copy my swimming coach&#39;s underwater swimming and almost drowned. Imagine a kid who just joined swimming trying to overdo his coach.</p>
<p>I did manage to learn underwater swimming quite quickly though...
Anyway. I don&#39;t understand why it&#39;s hard for me to sleep when there&#39;s days when I can literally drop on the bed and instantly fall asleep.</p>
<p>I guess I&#39;ll have to observe a lot more to figure that out. As for now, I&#39;m writing this at 5 in the morning with 0 sleep last night and I should probably just lay down for a few hours so I can at least stay up during the office hours.</p>
]]>
      </description>
      <pubDate>Mon, 10 Aug 2020 00:59:14 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/i-owe-the-oss-community</guid>
      <title>I owe the OSS Community</title>
      <link>https://reaper.im/blog/i-owe-the-oss-community</link>
      <description>
        <![CDATA[<p>I&#39;ve been asked a few times as to how I learn things and Why I support open source so much that I&#39;d like to work for a company that has a dedicated OSS team. I could answer this in one line , or I could write a whole essay.</p>
<h3 id="one-line-answer">One Line Answer</h3>
<p>I learn from open source repositories and study them to figure out stuff and things that exist out there.</p>
<h3 id="the-essay">The Essay</h3>
<p>We all started somewhere. The point in time where we knew basically nothing. I like calling it the <em>Dumb Point</em> , and every person you know has been there and then their decisions got them to where they are today.</p>
<p>Dumb Point&#39;s are basically where you might know enough to do something but you don&#39;t fully understand what&#39;s going on. And thinking that once you&#39;ve grown at a certain skill you won&#39;t have dump points is another mistake people make. I&#39;ve been with JS for about 2.5 years Industrially and about 4 years if you count the projects I did in college to learn JS in the first place and taking in consideration that I was coding in Python way before that would turn that into 8 years worth of experience with code but I still have dump points.</p>
<p>I had one last month when I was learning <em>Rust</em> , now rust isn&#39;t hard or anything but there&#39;s obvious differences that it has compared to the languages I&#39;m used to.</p>
<p>I&#39;ve worked with Static Typed languages before. Java, C, and in the recent years TypeScript(i know it&#39;s a toolset and not an acutal language, but you get the idea.) but then Rust has the concept of pattern matching and every line being a typed expression which does create friction when you start off, theres numerous other things that make it a little harder to just get used to Rust code, macros, variable shadowing , etc. Point being, I needed help to understand what was going on and like anyone else we&#39;d turn to google for this but then I don&#39;t open up Stackoverflow or Blogs for these anymore.</p>
<p>My first point of learning is the docs, always. That&#39;s where I look for the answers and most of the times good tools have sufficient documentation for you to refer too. The second point of learning for me is git repositories using that particular tool. Taking rust as example again, I&#39;d look for github repositories using rust and try to go through them as much as I can. A lot of times people add helpful comments on functionalities that are a little more complex and that helps you out too.</p>
<p>Overall, I study codebases to understand approaches and since I end up going through a variety of repositories I find various ways to implement similar things and then go with the approach that&#39;s both easy to read and performant, the other approach might be more performant and I&#39;d use it when building something for production but for initial learning and understanding I&#39;ll pick the readable version.</p>
<p>Now, since I do this a lot more with JS libraries and frameworks right now, I get to go through the <code>package.json</code> files which contain dependencies that the projects use, I normally have numerous tabs open for each npm package that I don&#39;t know about and this opens up even more repositories for me to study and obviously, I now know of more packages that can help with a certain task if needed in the near future.</p>
<p>And even though the knowledge I&#39;ve gained in years is not even close to 1% of what&#39;s out there, I still owe a debt to the open source community and hence most of what I build is open source.</p>
]]>
      </description>
      <pubDate>Sun, 02 Aug 2020 23:23:38 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/love-faded-wallpapers</guid>
      <title>My Love for Faded Wallpapers</title>
      <link>https://reaper.im/blog/love-faded-wallpapers</link>
      <description>
        <![CDATA[<p>I&#39;m the kind of guy who changes his wallpapers a lot. Like... A LOT!</p>
<p>But, there&#39;s this thing that I fancy. Almost all wallpapers that I download, I modify them to have a slightly washed out or faded look, if they weren&#39;t already that way.</p>
<p>A few examples of what I&#39;m talking about can be found on <a href="https://imgur.com/a/XgYEs">here</a> (note: these are not mine, just examples).</p>
<p>And since it&#39;s normally the same amount of settings from GIMP for almost all images, I thought I&#39;d write a service. Which I did somewhere around <code>3rd Jul 2019</code> , exactly a year ago and I&#39;ve been using it since.</p>
<p>Never really gave it away since I didn&#39;t think many people would want to use it but that&#39;s not something I should be deciding so I&#39;m going to post the link to it here.</p>
<p><a href="https://washed.siddharthgelera.com">Washed</a></p>
]]>
      </description>
      <pubDate>Thu, 02 Jul 2020 20:22:01 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/thinking-straight</guid>
      <title>What I do when I can't think straight.</title>
      <link>https://reaper.im/blog/thinking-straight</link>
      <description>
        <![CDATA[<p>I assume that I&#39;m not the only one who has moments like these where it&#39;s hard to come to a concrete decision.</p>
<p>I can only talk as a developer and I have these moments where I&#39;d like to build something but I start overplanning to avoid all short comings so much so, that I end up with a dilemma. Should I start the project or is a waste of time?</p>
<p>I rember posting a contradicting article , titled <a href="https://blog.siddharthgelera.com/2020/04/21/get-it-out-of-your-head/">&quot;Make it, just to get it out of your head&quot;</a>. But this scenario is a little different, because I did start making what I wanted too but the decisions I had to go through to make sure it doesn&#39;t fall were too much to handle.</p>
<h3 id="how-do-i-handle-it-">How do I handle it ?</h3>
<p>The solution I use isn&#39;t something I&#39;m sure about since it works for me, might not work for you but you can take the general idea into consideration.</p>
<p><strong>Let&#39;s redefine the problem, I can&#39;t think straight about a new project that I want to build, due to which I&#39;m unable to write any code or even setup the architechture to start it off.</strong></p>
<p>At this point, my general thought process goes down the negative loop hole of <em>you just aren&#39;t good enough</em> what I forget to add to that statement is <em>&quot;yet&quot;</em> , that one word creates a difference in thinking but when you&#39;ve already lost control such simple things don&#39;t come to mind. It&#39;s very easy for motivational speakers to use the <code>do this when this happens</code> kind of talk, and I myself say that and I realise how wrong that is.</p>
<p>So, I can&#39;t think straight and I can&#39;t tell my brain to chill out either, <strong>what do I do now?</strong>, Do something else.</p>
<h3 id="trick-your-brain">Trick your brain</h3>
<p>Yeah, you read it right. I end up doing something that I&#39;m already good at. Obviously, it&#39;s not the first thought that comes to mind but since I&#39;ve done it so many times it&#39;s more of a habit that I just instantly switch to doing it than wait for my brain to calm down.</p>
<p>Obviously, not everyone has been doing it so let&#39;s go back to when I couldn&#39;t do this. I&#39;d spend over 2-3 hours just getting back to normal while my brain kept thinking about what programming language should I use to build this, what framework makes more sense, this will make it a larger app, this will make it use more ram, but then this will break, this won&#39;t work for people with slower computers, etc, etc, etc.</p>
<p>There&#39;s no stopping my overthinking cycle when it gets out of control and the only way to slow it down to the point where I can at least think a little more logically is blasting music at the loudest volumes in my ear drums and even that works only if I&#39;m in the mood to listen to that genre.</p>
<h4 id="give-me-the-solution-already">Give me the solution already!</h4>
<p>As mentioned before, this might work only for me but the solution is singing to music while trying to calm the brain down and then build something I&#39;ve already built before and rebuild it.</p>
<p><strong>How can you replicate that?</strong></p>
<p>Start off with an attempt to calm yourself down. This can involve music, working out, sleeping, looking at the ceiling for the next 30 mins, anything, anything that works for you (Sadly, you&#39;ll have to figure this out).</p>
<p>Once you&#39;re done with that , we can move to stage 2, doing something we are already good at. Draw something you already did, sing a song you know, code something you&#39;ve coded multiple times before. The idea is to let yourself feel that slight comfort that you can build and improve on stuff that you&#39;ve done before.</p>
<h3 id="example">Example</h3>
<p>I&#39;ve wanted to build a <code>postgres</code> client for all platforms but I wanted to avoid using electron and building it with C++ will take me time since I&#39;ll have to learn a lot before I start actually building the application and I wanted the RAM usage and the total size of the app to be on the lower end of the scale which is never the case with Electron and I ended up going round and round around such points and ended with nothing.</p>
<h4 id="what-i-rebuilt">What I rebuilt.</h4>
<p>I&#39;ve been thinking about improving <a href="https://orion.barelyhuman.dev/">Orion</a> , a music player I built years ago but I never did anything because it worked well and didn&#39;t need any changes functionality wise. But, I didn&#39;t really like the design and have been wanting to change it but didn&#39;t because I kept myself busy on building new stuff.</p>
<p>Finally, Trashed the previous code of <a href="https://music.reaper.im">Orion</a> and rewrote it properly this time, removing all amateur coding standards I used back then. Changed the design to a new level of minimalism and voila!</p>
<p>While I was at it, I wanted to test a file tree based router I wrote and ended up rewriting the server side of it as well. Replaced Express with <a href="https://github.com/barelyhuman/routex">Routex</a>.</p>
<h4 id="sane-thinking-and-final-decision">Sane Thinking and Final Decision</h4>
<p>After this was all done , I just decided I&#39;d go with my usual choice of <a href="https://simulatedgreg.gitbooks.io/electron-vue/en/">Electron-Vue</a> and use it for the builds. If <a href="https://hyper.is">Hyper</a> can compete with iTerm in terms of memory management then so can I. The size of the app though, will have to figure that out. I normally try avoid external dependencies so I might be able to get away with it and keep the total app sized in the range of 60-100MB.</p>
<h3 id="tldr">TLDR;</h3>
<ol>
<li><p>Reduce the Overthinking Cycle with whatever works for you</p>
</li>
<li><p>Do something you are already good at, it can be anything. gaming, singing, dancing, drawing.</p>
</li>
<li><p>Try taking a decision at this point if you get back in to the overthinking loop, start again from step 1.</p>
</li>
</ol>
]]>
      </description>
      <pubDate>Mon, 22 Jun 2020 13:32:20 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/why-a-look-into-my-brain</guid>
      <title>Why are you providing it for free?</title>
      <link>https://reaper.im/blog/why-a-look-into-my-brain</link>
      <description>
        <![CDATA[<h2 id="intro">Intro</h2>
<p>Every time someone get&#39;s to know about what I&#39;m building, a few questions arise.</p>
<ul>
<li>Why?</li>
<li>It&#39;s so simple, anyone can make that, why are you wasting your time on it?</li>
<li>Who would use that?</li>
<li>You should charge for it.</li>
<li>You are just wasting your time.</li>
<li>Isn&#39;t that going to cost you?</li>
</ul>
<p>I&#39;d like to answer a few.</p>
<p><strong>Let&#39;s start.</strong></p>
<h2 id="simple--to-the-point-apps">Simple | To the Point Apps</h2>
<p>The simplest example to this would be the task list I created about 2 years ago, it has had a few improvements. Like the ability to share the task list with others but that&#39;s about it.</p>
<p>The task list lives in your browser and is built with minimal and well thought code and no web frameworks. Makes it easier for someone to later improve the code for more performance, or maybe add additional functionalities without disrupting the existing ones. I rarely have to worry about bugs with something this small, its hardly 200 lines of code.</p>
<p>If you&#39;d like to check the source (<a href="https://github.com/barelyhuman/rmnd-r">https://github.com/barelyhuman/rmnd-r</a>)</p>
<p>Normally, that should be enough for people to understand why, but for others, I&#39;ll get a little into details.</p>
<ol>
<li>A decided flow of business logic (rare among projects done for clients).</li>
<li>Lesser code to maintain, aka fewer bugs to fix.</li>
<li>Easy to scale , if you maintain the modular approach.</li>
</ol>
<p>While the above 3 are something every projects should follow, developers normally mess up at point 2.</p>
<p>Why? A lot of developers have given up on the point of writing efficient software because &quot;Everyone has 8GB ram and a TB of storage, so my 200MB APP with a full Chromium browser shouldn&#39;t be a problem for you.&quot; and obviously the other group with their &quot;VS Code is so fast. It uses electron too!&quot;</p>
<p>Now, while both of them are kind of right, you forget to see the whole picture. A full stack developer like me who has XCode, Android Studio and VS Code or Atom(I use atom so...) and Chrome and PostBird for Postgres and SequelPro for MySql and RoboT for mongo and Hyper for terminal and .....
you get the idea, your tool isn&#39;t the only thing I have on my system. The 200MB keeps adding up, and my RAM keeps getting eaten up by your so called &quot;everyone has enough RAM nowadays&quot; argument.</p>
<p>This is not just against electron. It&#39;s against the general mentality that the client can handle this amount of ram usage and this amount of space usage.</p>
<p>While VS Code is actually performant, people forget the amount of time it took Microsoft to get it to this point, go through their talks on it and you&#39;ll notice how much effort and hacking it took them to squeeze out that performance.</p>
<p>Why does this relate to my argument?
People prefer writing code that just works instead of efficient or well structured optimised code. Why? No time, strict deadlines, constant changes from clients. There&#39;s a huge list of factors.</p>
<p><strong>What does this do to the developer?</strong></p>
<p>The developer&#39;s now coding to make the software just work. He won&#39;t look at other things that need to be checked. He&#39;ll just get this change done and this laziness ends up with adding multiple lines of dependent code into a certain module that&#39;s being used by 10 different modules. Should I be blaming him? Nope, I can&#39;t. But, the approach of modifications to modules can be changed.</p>
<p>Not everyone has the patience and a large company backing them up for developing and optimising their software project. Plus, people try to make one app do everything. To the point where things start depending on each other so much that it becomes hard for a developer to make sure what he writes doesn&#39;t impact any another piece of code.</p>
<p>People with larger projects know this and have <em>partially</em> solved this issue with tests and code reviews. I say <em>partially</em> because when you actually go through this, you still spend time rewriting tests for something you built but then someone else&#39;s code change made your part of the implementation a little close to uh... un-reactive.</p>
<p>I don&#39;t wanna be a hypocrite , so I&#39;ll let you know that I myself have developed apps on Electron. I don&#39;t hate electron. I just think it&#39;s a little too excessive to packages the whole browser with the app, most people have chrome installed on their systems and we could use an installed version but that&#39;s a discussion for another day.</p>
<p>Now how do you solve this?
Treat everything as a package. Everything that can be reused should be it&#39;s own package. You don&#39;t literally have to create everything into a NPM package or a Rust Crate and post it but treat them that way. As in, you write it once, and the functionality is frozen. Everything else will be on top of it and not a modification to the original package. Yes, your new package now depends on the previous one but if there&#39;s 3 other components using it, you don&#39;t have to worry about breaking those components.</p>
<p>Modules and Components exist so you write isolated code that can be re-used by other modules without breaking it&#39;s own flow. DRY (Don&#39;t Repeat Yourself) , heard of it?</p>
<p>Hence, the small apps. I don&#39;t have to spend a lot of time deciding what goes where and can maintain a good sane structure. By small I don&#39;t mean write apps that do just one thing, but write apps that follow the above mentioned package or everything is a module based approach.</p>
<p>By the way, we were talking about this <a href="https://rmnd-r.siddharthgelera.com/">Task List</a></p>
<h2 id="why-dont-you-market-them-">Why don&#39;t you market them !?</h2>
<p>There&#39;s not much that I can write for this question. I&#39;m just not good at talking people into using something. I&#39;m not skilled enough to act like I built a Lamborghini when I know I built a Maruti.</p>
<p>Also, most of the time I build things because I think they&#39;d help me reduce my work. I&#39;ve had the stupidest ideas and I just built them to get it out of my head. Never have I thought that any of my ideas would help the industry or others.</p>
<ul>
<li>Youtube based music player</li>
<li>Idea Storage app</li>
<li>The markdown editor</li>
<li>Minimal CSS Resets</li>
</ul>
<p>Just to name a few.</p>
<p>I don&#39;t know anyone who&#39;d need these, because there&#39;s so many more well built apps that are being sold by companies with professional sales team. I can&#39;t compete with them. But, I can use my own apps.</p>
<p>So, ideas like these don&#39;t need marketing and if you do end up at my GitHub page , you&#39;ll see a lot of such apps.</p>
<h2 id="for-free-really-isnt-it-costing-you">For Free? Really? Isn&#39;t it costing you?</h2>
<p>I&#39;d put it this way, my education had a very minute part in my development life. I was coding before I got into college and almost everything I learned involves blog posts and tutorials from the kind people serving the open source community. I&#39;ve been a fan of open source and services that provide a hobby/free plan for the longest time. Why do you think I keep dreaming about joining Github and Mozilla.</p>
<p><strong>But GitHub has a paid plan, TillWhen doesn&#39;t!</strong></p>
<p>I realise that, but GitHub also has a huge user base and needs powerful servers which you can&#39;t afforded with your job&#39;s salary and hence needs a pricing model. Also, GitHub&#39;s been making more and more features free to use for solo developers as their revenue from the team based users have been increasing.</p>
<p>On the other hand, TillWhen hardly has 20+ users, I don&#39;t need a state of the art server. I can handle it with my day job&#39;s salary. You can donate to it if you&#39;d like to but that&#39;s optional.</p>
<p>But, providing it for free helps me sleep better. Less money to worry about!</p>
<p>The other projects I have are all hosted for free with platforms like Heroku, Netlify and it&#39;s shared resources, and since I&#39;m the only one using these apps, the usage doesn&#39;t break the free usage limits on either of the platforms.</p>
<p>The only pricing I pay yearly is the domain charges. Everything else I&#39;ve managed to obtain for free. Thus, I don&#39;t mind giving it away for free.</p>
]]>
      </description>
      <pubDate>Wed, 10 Jun 2020 16:46:46 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/nextjs-pg-knexjs</guid>
      <title>Solution to multiple connections with knex while using Next.js</title>
      <link>https://reaper.im/blog/nextjs-pg-knexjs</link>
      <description>
        <![CDATA[<h3 id="the-issue">The Issue</h3>
<p>Using next.js has it&#39;s own advantages and not going to go through them in this post but one major blockage while building <a href="https://tillwhen.barelyhuman.dev">TillWhen</a> was the number of Database connection each api request was creating. Initially I thought it was just because of the constant restarts of the server I was making that lead to the 30+ connections but I remember setting PG to disregard idle connections after a minute.</p>
<p>Anyway, soon It was obvious that the knex connections I created weren&#39;t getting destroyed and there was a new connection every time I made a request.</p>
<p>Now even though thins could be easily solved for <code>mysql</code> using <code>serverless-mysql</code> which manages the connections based of serverless environments, and I could even use the <code>pg</code> version of the above, <code>serverless-pg</code> but, we already had the whole apps built with knex.js and I didn&#39;t wanna rewrite every query again so had to find a better way.</p>
<p>I had 2 solutions at this point.</p>
<ul>
<li>Memoize the connection.</li>
<li>Destroy the connection on request end.</li>
</ul>
<h3 id="solution-1---memoize">Solution #1 - Memoize</h3>
<p>Now, I assume that you have one file that you maintain the knex instance in, if not, then you are going to have to do a lot of refactoring.</p>
<p>Let&#39;s get to creating a knex instance but with a simple variable that will store the connection instance so on the next request, the same is sent back to the handler using the db instance.</p>
<p><code>utils/db-injector.js</code></p>
<pre><code class="language-js"><span class="token keyword">const</span> dbConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"knexfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"knex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> cachedConnection<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getDatabaseConnector</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedConnection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Cached Connection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> cachedConnection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">const</span> configByEnvironment <span class="token operator">=</span> dbConfig<span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">||</span> <span class="token string">"development"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configByEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Failed to get knex configuration for env:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"New Connection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token function">knex</span><span class="token punctuation">(</span>configByEnvironment<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cachedConnection <span class="token operator">=</span> connection<span class="token punctuation">;</span>
  <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>We now have a variable <code>cachedConnection</code> that either has an instance, if not, a new one is created and is referred to by it. Now let&#39;s see how you would use this in the request handlers.</p>
<p><code>controllers/user.js</code></p>
<pre><code class="language-js"><span class="token keyword">const</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"utils/db-injector"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

controller<span class="token punctuation">.</span><span class="token function-variable function">fetchUser</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">db</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>At this point you are almost always getting a cached connection, I say almost always because the actual <code>utils/db-injector.js</code> might get reinit by next.js and you will have a connection that still hanging out with knex for longer than intented. This isn&#39;t much of an issue but if you are like me who doesn&#39;t want this to exist either, let&#39;s get to the second solution.</p>
<h3 id="solution-2---destroy">Solution #2 - Destroy!</h3>
<p>Yeah, we mercilessly destroy the connection with the database after each request to make sure that there&#39;s always only one connection per request, the peak of optimization! Which should&#39;ve been handled by knex but let&#39;s not blame knex!</p>
<p>Anyway, the 2nd solution required a simple higher-order function that would</p>
<ul>
<li>take in the request handler</li>
<li>give it a connection instance</li>
<li>wait for it to complete the request</li>
<li>destroy the connection</li>
</ul>
<p>we start by modifying the <code>db-injector</code> to create a new instance everytime instead of caching because the cached instance won&#39;t exist anymore and will give you a unusable knex connection or no connection at all. Let&#39;s do that first.</p>
<p><code>utils/db-injector.js</code></p>
<pre><code class="language-js"><span class="token keyword">const</span> dbConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"knexfile"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> knex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"knex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> connection<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getDatabaseConnector</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> configByEnvironment <span class="token operator">=</span> dbConfig<span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">||</span> <span class="token string">"development"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configByEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Failed to get knex configuration for env:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    connection <span class="token operator">=</span> <span class="token function">knex</span><span class="token punctuation">(</span>configByEnvironment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>We now have a new connection on every request, let&#39;s write the higher-order function so it can destroy the connection and let the DB of the connection misery.</p>
<p>The higher-order function as said, is going to be very simple, it&#39;s just taking in the handler , waiting for it to complete the request and then we destroy it.</p>
<p><code>connection-handler.js</code></p>
<pre><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> getDatabaseConnector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"utils/db-injector"</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> connector <span class="token operator">=</span> <span class="token function">getDatabaseConnector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    req<span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token function">connector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> req<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>Why do I pass in <code>req.db</code>?, reason being that if the handler keeps importing the db , the higher-order function has no way to destroy the exact instance, and hence we init the db instance and destroy the instance here. It&#39;s a simple form of self-cleaning.</p>
<p><code>pages/api/user/index.js</code></p>
<pre><code class="language-js"><span class="token keyword">import</span> connectionHandler <span class="token keyword">from</span> <span class="token string">'connection-handler'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">handler</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">{</span>currentUser<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">;</span>
      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> req
        <span class="token punctuation">.</span><span class="token function">db</span><span class="token punctuation">(</span><span class="token string">'users'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string">'profiles as profile'</span><span class="token punctuation">,</span> <span class="token string">'users.id'</span><span class="token punctuation">,</span> <span class="token string">'profile.user_id'</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string">'users.id'</span><span class="token punctuation">,</span> currentUser<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>
          <span class="token string">'profile.name as profileName'</span><span class="token punctuation">,</span>
          <span class="token string">'profile.id as profileId'</span><span class="token punctuation">,</span>
          <span class="token string">'users.id '</span><span class="token punctuation">,</span>
          <span class="token string">'users.email'</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>error<span class="token operator">:</span> <span class="token string">'Oops! Something went wrong!'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connectionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>And finally, I&#39;m showing a generic Next.js handler here instead of the full fledged controller like in the example above, since the higher-order function is going to be added in here and not in the controllers. So the only modification you&#39;ll have to do to all the route handlers is , instead of exporting the handlers directly, export a version wrapped in a higher-order function.</p>
]]>
      </description>
      <pubDate>Fri, 29 May 2020 22:14:18 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/useful-dokku-commands</guid>
      <title>Useful Dokku Commands</title>
      <link>https://reaper.im/blog/useful-dokku-commands</link>
      <description>
        <![CDATA[<p>A micro post for commands that I usually look for, while using dokku.</p>
<h2 id="create-app">Create App</h2>
<pre><code class="language-bash">dokku apps:create <span class="token operator">&lt;</span>app-name<span class="token operator">></span>
</code></pre>
<h2 id="database">Database</h2>
<pre><code class="language-bash"><span class="token function">sudo</span> dokku plugin:install https://github.com/dokku/dokku-postgres.git

dokku postgres:create <span class="token operator">&lt;</span>db-name<span class="token operator">></span>

dokku postgres:link <span class="token operator">&lt;</span>db-name<span class="token operator">></span> <span class="token operator">&lt;</span>app-name<span class="token operator">></span>
</code></pre>
<h2 id="logs">Logs</h2>
<pre><code class="language-bash">dokku logs <span class="token operator">&lt;</span>app-name<span class="token operator">></span>

dokku logs <span class="token operator">&lt;</span>app-name<span class="token operator">></span> -t <span class="token comment">#to tail the logs</span>
</code></pre>
<h2 id="ssl">SSL</h2>
<pre><code class="language-bash"><span class="token function">sudo</span> dokku plugin:install https://github.com/dokku/dokku-letsencrypt.git

dokku config:set --no-restart <span class="token operator">&lt;</span>app-name<span class="token operator">></span> <span class="token assign-left variable">DOKKU_LETSENCRYPT_EMAIL</span><span class="token operator">=</span><span class="token operator">&lt;</span>email<span class="token operator">></span>

dokku letsencrypt <span class="token operator">&lt;</span>app-name<span class="token operator">></span>
</code></pre>
<h2 id="domain">Domain</h2>
<pre><code class="language-bash">dokku domains:add <span class="token operator">&lt;</span>app-name<span class="token operator">></span> <span class="token operator">&lt;</span>domain<span class="token operator">></span>
</code></pre>
<h2 id="process-management">Process Management</h2>
<h3 id="restart">Restart</h3>
<pre><code class="language-bash">dokku ps:restartall
dokku ps:restart <span class="token operator">&lt;</span>app-name<span class="token operator">></span>
</code></pre>
<pre><code class="language-bash"><span class="token comment">### Rebuild from source</span>
dokku ps:rebuildall
dokku ps:rebuild <span class="token operator">&lt;</span>app-nam<span class="token operator">></span>
</code></pre>
<h2 id="deploy">Deploy</h2>
<pre><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> dokku dokku@<span class="token operator">&lt;</span>host<span class="token operator">></span>:<span class="token operator">&lt;</span>app-name<span class="token operator">></span>

<span class="token function">git</span> push dokku master

or

<span class="token function">git</span> push dokku <span class="token operator">&lt;</span>local-branch<span class="token operator">></span>:master
</code></pre>
]]>
      </description>
      <pubDate>Thu, 28 May 2020 15:24:46 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/efficient-software-instead-of-software-that-works</guid>
      <title>Efficient Software vs Software that just works</title>
      <link>https://reaper.im/blog/efficient-software-instead-of-software-that-works</link>
      <description>
        <![CDATA[<p>I landed on this post today.</p>
<p><a href="https://dev.to/tux0r/does-your-website-really-need-to-be-larger-than-windows-95-16mm">Link</a></p>
<p>This is a post from 2018 and I landed on this looking for a good way to build multi platform apps while maintaining a really small footprint. The arguments and discussions in its comments were hilarious and kinda pleasing it lead me to a rust based webview for pure web apps but on a desktop.</p>
<p>Anyway, was close to locking on programming the whole thing in C/C++ and use some abstractions to support all 3 platforms, and all this headache because, I realized that a lot of tools that I have installed are built with the chromium engine as a window layer with Electron on the top. A few to name would be VS Code, Postman, Spotify , WebTorrent which ended up taking a lot of space on my disk vs softwares like Sublime and Transmission that hardly take up any space and the only reason I don&#39;t use Sublime is because the packages I need are obsolete and need a little tweaking to get them to work. So I, just end up letting vscode eat my ram and battery.</p>
<p>For anyone else, the disk/ram/battery usage is important to me because I have a entry level Macbook Pro with just 121gb of user storage and that fills up quickly when you are a nodejs developer. Cause well, just 20 Repositories have over GB&#39;s worth of just node_modules and then I even decided to download XCode and Android Studio because someone wanted a Flutter and React Native application as well.</p>
<p>I agree with tux0r and being a fellow minimalist it would be a nice if software was efficient and more focused on being performant while being small instead of</p>
<p>&quot;Yeah, this library, that lib, add all of them up and ship it, if the user needs the software he&#39;ll download the 200GB installation candidate!&quot;</p>
<p>Now, tux0r&#39;s argument was specific to websites being a huge ram hog
but in the comments he ends up supporting desktop apps for heavier tasks and most of the people end up supporting electron and JS as a language.</p>
<p>Now I know its not going to be ideal for business as they want everything quick and not always <em>done right</em> but a lot of us do build projects for fun and we should actually try to build something that is a lot faster to use while not being a ram hogger. Cause , a lot of people don&#39;t upgrade for a long time and they can&#39;t really enjoy the software you built.</p>
<p>On a different note, I&#39;m still unable to decide what I should be doing for that multi platform desktop app I wanted to build...</p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:26:34 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/get-it-out-of-your-head</guid>
      <title>Make it, just to get it out of your head.</title>
      <link>https://reaper.im/blog/get-it-out-of-your-head</link>
      <description>
        <![CDATA[<p>Now I&#39;ve been the guy who just throws out repositories right left and center, hasn&#39;t completed projects and mostly have them on pending for a really long time unless something really motivates me to work on that project again.</p>
<p>I still end up making these things again and again just because I think that it&#39;s good to get that thought out of your head and out into code because you get to the point where you realize whether that project is actually going to be something you yourself would use.</p>
<p>I ended up building a lot of stuff that I do personally use and maybe no one else does because I haven&#39;t published anything about those projects anywhere and I&#39;m the only one who knows about their existence. On the contrary there&#39;s double the number of repos that even I don&#39;t care about anymore.</p>
<p>The whole process of thinking and getting it out into the world of code gets you through scenarios that get you to realize and also sometimes learn about things that you might be doing wrong.</p>
<p>I&#39;ve got this really old music player that I built using RiotJS, 0 folder structure, 0 modularity, just plain working code.When I went back to it to make changes or add features, I realized that I don&#39;t plan out my projects and jump straight to prototyping, the next time I built the same thing on Vanilla JS, the code was a 100 times better because I had a mental image of things I needed to separate and things that need to be maintained to avoid having spaghetti code in the later stages of maintenance.</p>
<p>These subconscious decisions help you out in the later stages a lot.</p>
<p>I don&#39;t use that player anymore but it&#39;s taught me something.
so did the todo list(which everyone has built at some point in their coding life)
and so did the other 100 repos that I have on my github</p>
<p>and after all of this reading, the moral was basically the title of this post.</p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:25:28 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/css-resets-mnmlcss</guid>
      <title>Consistent UI's with CSS Resets and announcing Mnml.css</title>
      <link>https://reaper.im/blog/css-resets-mnmlcss</link>
      <description>
        <![CDATA[<p>Another post, another day.
or was it supposed to be the other way....</p>
<p>Anyway, CSS Resets.
Everyone&#39;s heard of <a href="https://necolas.github.io/normalize.css/">Normalize.css</a>? No? Are you serious!</p>
<p>Never-mind, so Normalize has this amazing set of css properties that someone decided to write so that the CSS we write is consistent across browsers and this makes it easier.</p>
<p>Now since this is possible some people figured that it&#39;d be nice to have stylized resets, so you could just link them into the head element and voila! beautiful html without any additional overhead.</p>
<p>A few examples would be</p>
<ul>
<li><a href="https://milligram.io/">Milligram</a></li>
<li><a href="https://kognise.github.io/water.css/">Water.css</a></li>
</ul>
<p>And these are actually really good, but then there are certain things that I wanted to restyle and also certain helpers that I keep adding into my css, I know tailwind provides them! I&#39;m not going to add a full css library and then setup purifyCss when I can type it out in the same amount of time. So, I picked one up and modified it to have my own set of resets and here&#39;s where the shameless plug comes in.</p>
<ul>
<li><a href="https://mnmlcss.js.org/">mnml.css</a></li>
</ul>
<p>Just like the above two, it uses it&#39;s own resets. Other projects where I managed to use this.
and since all are available on my github, you can check the code to see the implementations</p>
<ul>
<li><a href="https://corona.siddharthgelera.com/">Corona Tracker</a></li>
<li><a href="https://monotes.barelyhuman.dev/">Markdown Editor</a></li>
<li><a href="https://hireme.barelyhuman.dev/">Hiring Network</a></li>
</ul>
<p>you can check the git repo for the available classes and the resets that are modified <a href="https://github.com/barelyhuman/mnml.css">git repo</a> later today</p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:23:34 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/opensource-hiring-platform</guid>
      <title>My take on an open source job listing platform ?</title>
      <link>https://reaper.im/blog/opensource-hiring-platform</link>
      <description>
        <![CDATA[<p>Yeah yeah, another hiring platform , we&#39;ve got so many , why would you build another? and it looks so crappy, why would anyone use it?</p>
<p>Will answer all of that, give me a sec!</p>
<p>Now, Let&#39;s see. Click on the link below to get to it.</p>
<p><a href="https://hireme.barelyhuman.dev/">HireMe</a></p>
<h2 id="whats-different">What&#39;s different!?</h2>
<p>Nothing actually, its a lot worse than most of the sites <em>at the moment</em>.
Reason being, that I spent only a few hours to build this monstrosity.</p>
<h2 id="why-would-i-use-it">Why would I use it?</h2>
<p>You don&#39;t have to, I built it because of all the people that have been getting layoffs from their employer due to the recent events and I thought it&#39;d be nice to have another platform for them to try out on.</p>
<p>And since I want people to actually get in touch with the candidate instead of just judging and throwing away a profile based on what they see written on the profile.</p>
<p>I know it saves them time to filter out unneeded profiles but then you miss out on candidates that might be worth the time. This is pretty opinionated so let&#39;s not get into a huge debate about it, cause at the end of the day I&#39;d still apply for a job which states 5 years of experience even when I hardly have 3.</p>
<h2 id="you-really-think-huge-companies-would-get-on-it">You really think huge companies would get on it?</h2>
<p>I don&#39;t know, I don&#39;t have that expectation, not when I haven&#39;t added all the features that I think the platform should have. It&#39;s an MVP , enough to get 2 people connected. There&#39;s no email verification so yeah, I can have huge amounts of junk signups by morning tomorrow. Thus, pushing people from actually even using it.</p>
<p>Some might even say I built a platform that&#39;s built for spammers to abuse. While I do realize that these issues exist. I&#39;m still throwing it out and will be working on improving it as soon as I can.</p>
<p>But still,
The point of its existence is to help people out, now whether people use it for the reason it was built or make it junkyard, it&#39;s on them.</p>
<p>I&#39;ll keep improving the site as I get more and more time, but for the time being, as I need Iron Man playing in the background to work at full speed. This is going to be it.</p>
<p>People are allowed to raise issues and send PR&#39;s.</p>
<p>It&#39;s open source for a reason!!</p>
<p>Update: The App now has Magic Link based login and signup, but sendgrid seems to have a heavy loaded queue due to the twilio hackathon etc, etc so I don&#39;t think the emails are getting delivered at the speeds that they should.
Will shift to nodemailer later. The UI has been beautified a little bit too. If that mattered</p>
<p>Update: Sendgrid servers seem to be back to normal and the app&#39;s login is now functional.</p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:21:41 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/my-vscode</guid>
      <title>My VSCode, Visual Settings (Theme, tab layouts,etc)</title>
      <link>https://reaper.im/blog/my-vscode</link>
      <description>
        <![CDATA[<p>Now this doesn&#39;t really need a huge write up but I&#39;ll just link you to a <a href="https://gist.github.com/barelyhuman/cab9d7598b3251d3aee04201cb1c137a">Gist</a> that&#39;ll give you the whole <code>settings.json</code>.</p>
<p>Changed my mind,
I&#39;m gonna link a few things that I&#39;m using anyways.</p>
<h3 id="theme">Theme</h3>
<p>I switch between these 3 themes</p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme">Material Theme</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=teabyii.ayu">Ayu Theme</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=miguelsolorio.min-theme">Min Theme</a></p>
<h3 id="font">Font</h3>
<p>It&#39;s a custom Ubuntu Mono font with Ligatures added, You can find it at <a href="https://github.com/lemeb/a-better-ligaturizer">lemeb/a-better-ligaturizer</a>, or customize any of your own fonts to use ligatures as well</p>
<p><a href="https://github.com/tonsky/FiraCode">Fira Code Mono</a> is another one that I like.</p>
<h3 id="plugins">Plugins</h3>
<p><a href="https://www.software.com/music-time">Music Time - Control Spotify with your code editor</a></p>
<p><a href="https://marketplace.visualstudio.com/items?itemName=pnp.polacode">PolaCode - For Epic Code screenshots</a></p>
<p>And that&#39;s about it, I do have other language specific plugins but I don&#39;t think I need them posted here.</p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:20:28 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/gitscaff-git-repos-boilerplate</guid>
      <title>Using existing GitHub repositories as boilerplate</title>
      <link>https://reaper.im/blog/gitscaff-git-repos-boilerplate</link>
      <description>
        <![CDATA[<p>A tool that I made is called <a href="https://github.com/barelyhuman/gitscaff">GitScaff</a>, it&#39;s a simple wrapper around the <code>git clone</code> command but makes it a little simpler to clone repositories as templates from existing GitHub/Gitlab repositories and supports private repositories and Gitlab repository grouping so if you have boilerplate that is a private repository, you can still use this utility, because at the end of the day it is still a simple <code>git clone</code></p>
<h2 id="why-though">Why though?</h2>
<p>No real reason, I was using <code>degit</code> for a while and then it created an issue because I couldn&#39;t use it for cloning private template repositories and it didn&#39;t support gitlab&#39;s repository grouping either so it kinda bummed me out to have to clone and then get rid of the .git folder and all which i could do with a single command using an alias (which i should have...) in Linux.</p>
<p>Anyways, I had time to kill so I built this to do that for me.</p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:19:17 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/public-temporary-file-storage-api</guid>
      <title>Why I built a temporary file storage and left the API Public?</title>
      <link>https://reaper.im/blog/public-temporary-file-storage-api</link>
      <description>
        <![CDATA[<p>Now, this isn&#39;t a very complex project and anyone who&#39;s worked on basic web servers can build this.</p>
<h2 id="but-why-did-i-build-it">But Why did I build it?</h2>
<p>I had this project where I needed to upload images and Firebase&#39;s storage was my first alternative, I kept using it but then the storage quota just asked me to go find a better solution, because the moment you upload over 15-20 images you&#39;ve completed your storage quota and now I&#39;m stuck with a upload code that won&#39;t work and I can no longer upload images to Firebase.</p>
<p>My next alternative was Imgur&#39;s API to upload private images but then that limits me to a certain amount of uploads per minute.</p>
<p>And then I started looking for a service that&#39;d allow me to upload images for the sake of testing and then delete those images after a certain threshold time. Sadly, didn&#39;t find any or I just sucked at searching. Either way my last search result for this was <a href="https://file.io">file.io</a> and it was kind off what I wanted but It would delete the file the moment I requested it for the first time.</p>
<p>So, I ended up building one, for the people who&#39;d like to know what services are being used for this, it&#39;s just a combination of Next.JS for the demo page and Node.JS and MySQL for the back-end. All of this is hosted on Heroku&#39;s free tier for now, since I&#39;m the only one using it and both Heroku and the db would stop working if someone were to overload the API so that&#39;s that. I know it&#39;s not a good solution but it works since I&#39;m the only one using it.</p>
<h2 id="but-without-any-authentication-people-are-going-to-use-up-all-your-storage">But without any authentication, people are going to use up all your storage!</h2>
<p>I understand that but as of now I&#39;m the only person who knows about it&#39;s existence so that&#39;s that and if people do start using it, let me know in the comments so I can add up a full fledged API Key based access system for the API and also move it to a Digital Ocean server to increase the storage and also increase each file&#39;s time to deletion.</p>
<p>Files uploaded from the demo site have a 30 second life and will be deleted after that.</p>
<p>Here&#39;s a link to the <a href="https://tempx.barelyhuman.dev/">demo</a></p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:17:10 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/covid-tracker</guid>
      <title>Covid Tracker Attempt</title>
      <link>https://reaper.im/blog/covid-tracker</link>
      <description>
        <![CDATA[<p>I created this because I was bored and didn&#39;t have anything creative to make and since everyone seems to be posting theirs.
Here&#39;s a minimal version that gets you the counts of various incidents</p>
<p><a href="https://corona.siddharthgelera.com/">Link</a></p>
]]>
      </description>
      <pubDate>Wed, 22 Apr 2020 00:16:05 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/importance-of-development-tools</guid>
      <title>Importance of Development Tools</title>
      <link>https://reaper.im/blog/importance-of-development-tools</link>
      <description>
        <![CDATA[<p>It&#39;s hard to not talk about this topic, I&#39;ve always been the kind of person who&#39;d prioritize learning over everything and have no regrets. I&#39;ve done that while building most of my projects. Better project structures, easier ways to implement a certain functionality while maintaining a clean code, all of these have come after a lot of trial and error and there&#39;s still times where I&#39;d give up on clean code just to get a hacky version of my idea up and working.</p>
<p>But this post isn&#39;t supposed to be about learning, this post is about why <em>Development tools</em> are an important part of a developer&#39;s life and why he should focus on growing up to be a power user of every tool that exists in his dev toolchain. People who think that this is supposed to be obvious, you&#39;ll find out why I&#39;m writing this.</p>
<p>I&#39;ve seen people use VSCode like they were using notepad++. No hard feelings towards notepad++ but the whole point of having something feature rich like VSCode is to make it easier and faster for you to work with. People seem to be surprised when I use <code>multi-cursors</code> in the editor to edit multiple lines of code.</p>
<p>The code editor is not the only tool that I&#39;d like to focus on. Database GUI Clients, Various Browser debugging environments, Platform specific IDE&#39;s (Android Studio / XCode),Deployment Tools, CI/CD all of these have a ton of features that can help you automate and if not automate , maybe just make it easier and sometimes also faster for you.</p>
<p>Even though I am trying to convince you to use tools, I don&#39;t want people to stop going through the raw basics of each of the technologies that they use the tool for. I still want you to learn to use something like <code>vim</code>, I still want you to learn raw sql queries, you should already know why the linters need to exist.</p>
<p>Examples</p>
<ul>
<li>Instead of Browsing for a file through the file tree, use the super search provided by your code editor.</li>
<li>Use a GUI to manage your remote and local database instances instead of writing redundant create/delete queries for it. The GUI tool does allow custom queries and the tables are a visually a lot more pleasing to go through (Doesn&#39;t mean , you stop learning SQL/NOSQL queries all together and just depend on the tool)</li>
<li>Learning to use a Git Diff tool like <code>Sublime Merge</code> or <code>Git Kraken</code> to make merge conflicts and git history tracking a breeze. (Doesn&#39;t mean you shouldn&#39;t learn <code>git</code> basics)</li>
</ul>
<h2 id="tldr">TLDR</h2>
<ul>
<li>Learn the basics (Advanced topics too, if you can) of all the technologies that you use.</li>
<li>Find tools that suffice to your requirements and don&#39;t use heavy tools if you&#39;re not going to use it&#39;s features. You are just wasting your system memory in most cases.</li>
<li>Grow to be a power user of each tool you use, learn the keyboard shortcuts, if the tool can be configured, figure out various ways to configure it. If the tool has a plugin system, maybe even build a plugin to know about it inside out.</li>
<li>Don&#39;t skip the 2nd point!</li>
</ul>
]]>
      </description>
      <pubDate>Tue, 03 Mar 2020 13:18:25 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/column-null</guid>
      <title>COLUMN “” CONTAINS NULL VALUES | Postgres</title>
      <link>https://reaper.im/blog/column-null</link>
      <description>
        <![CDATA[<p>I don&#39;t maintain migrations so I end having this error almost everytime I add a new column that&#39;s not nullable.</p>
<p>Here&#39;s a few queries you can execute for this.</p>
<h4 id="integer">Integer</h4>
<pre><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">public</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>tablename<span class="token operator">></span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>column_name<span class="token operator">></span> <span class="token keyword">integer</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="string">String</h4>
<pre><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">public</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>tablename<span class="token operator">></span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>column_name<span class="token operator">></span> <span class="token keyword">VARCHAR</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">default</span> <span class="token string">' '</span><span class="token punctuation">;</span>
</code></pre>
<h4 id="boolean">Boolean</h4>
<pre><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token keyword">public</span><span class="token punctuation">.</span><span class="token operator">&lt;</span>tablename<span class="token operator">></span> <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>column_name<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
</code></pre>
]]>
      </description>
      <pubDate>Tue, 18 Feb 2020 19:24:41 GMT</pubDate>
    </item>
      <item>
      <guid>https://reaper.im/blog/is-life-hard</guid>
      <title>Is Life really hard ?</title>
      <link>https://reaper.im/blog/is-life-hard</link>
      <description>
        <![CDATA[<p>This might be just another life lesson post on the internet, but it also might be worth a read. </p>
<p>Let’s GO!</p>
<p>Life is easier than you think and harder than you imagine. Your everyday decisions are responsible for what happens with you and also with people connected to you.</p>
<p>Every decision that you take, leads you to an experience. This experience might not be a good one but if you do accept the fact that you were wrong then this will help you learn a lot.</p>
<p>Let’s imagine life as an Open World Game, where you decide whether you’re going to go for the main quest or complete a side quest.</p>
<p>If you chose to complete the side quest, it might lead to another side quest or might give you a clue about the main quest or might get you armed with weapons or other utilities that might just make it a little bit easier for the main quest.</p>
<p>If you chose to complete the main quest, then you end up progressing in the story and learn a little more about the other characters around you. During the completion of the story your opinion will change based on the characters, you develop smarter ways to complete the quest and then the game’s main story line is basically done. You missed the side quests but completed the story successfully anyways.</p>
<p>Unfortunately, life doesn’t guide us the way the game does so here our own decisions help us get through it. These decisions when wrong will help you learn about what has to be improved in your life and when correct, will help you advance in your journey.</p>
<p>This Journey that I’m talking about doesn’t have to have a target or a goal. We set targets based on things we’d like to accomplish. We make life harder for ourselves by trying to compare ourself with people. We mentally increase our own insecurities to lead up a life where you start stressing about everything you do and regret things that you did.</p>
<p>We try to convince others and ourselves that we are better than the person who has achieved something. When the reality is that, it doesn’t matter what you’ve achieved. Let’s try to understand this.</p>
<h3 id="will-a-lamborghini-make-you-happy">Will a Lamborghini make you happy?</h3>
<p>Most of you are straight of going to say “YES! IT WILL!” and then there will be people who don’t like the car and will say “Nah, <code>insert car name here</code> is better, and that’ll make me happy” and then there might be people who just don’t like cars and prefer bikes and this goes on. The point is, it’s a luxury.</p>
<p>These things make us feel good about what we have accomplished. Owning a costly watch, car, bike etc etc Et cetera!. Which isn’t what makes us happy. I mean, maybe for a few days, months but that&#39;s about it. The fact that we all crave financial comfort more than mental comfort is what make life harder.</p>
<p>The fact that we don’t have to worry about financial problems anymore is what makes you think that you’ve achieved success. </p>
<p>Now, success is defined differently by different people. Some define it as Fame, some may define it as Fortune and some would like to define it as Happiness. If you’ve achieved all 3, then I envy you and respect you.</p>
<p>If you’ve achieved either one or two, I still respect you. It doesn’t matter.
There is no difference as to what you think of success to be , because there is no rule book that says that you’ve got to be rich, you’ve got be strong, you’ve got to be a genius. The world has never limited a person to anything. The standards we set in our mind for “Good Life / Happy Life” is what makes us feel that we haven’t reached to the point we deserve to be on. There is no competition unless you think of it as a competition. If you’d like to compete will people for fortune, do it if it makes you feel good.</p>
<p>So, Is life really hard? I don’t think so. I’ve had my down times but they all helped me out. It is a diplomatic answer but trust me, there’s no easier way to explain it. Life is as hard as you make it.
We make it hard by overthinking about stuff, we jump to conclusions without a proper thought. We blame others to convince ourselves that what we decided to do was right.</p>
<p>The day we stop worrying so much about what will happen and what has happened. It’ll make life a lot easier. Just know that, it doesn’t matter what you choose to be or achieve. You’ll achieve it sooner or later and that’ll motivate you enough to aim for something a little more bigger.</p>
<p>Anyway, have a great one.</p>
]]>
      </description>
      <pubDate>Sun, 01 Oct 2017 13:00:00 GMT</pubDate>
    </item>
</channel>
</rss>